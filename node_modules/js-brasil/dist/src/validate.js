"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var inscricaoestadual_1 = require("./inscricaoestadual");
var placa_1 = require("./placa");
var create_1 = require("./create");
var rg_1 = require("./rg");
var iptu_1 = require("./iptu/iptu");
function validate_aih(aih) {
    var aihClean = aih.replace(/[^\d]+/g, '');
    var dvOriginal = aihClean.substr(-1);
    var dv = create_1.create_aih(aihClean);
    return dvOriginal === dv;
}
exports.validate_aih = validate_aih;
function validate_celular(cel) {
    var celClean = cel.replace(/[^\d]+/g, '');
    celClean = celClean.replace(/_/g, '');
    if (celClean.length !== 11) {
        return false;
    }
    if (celClean[0] == 0 || celClean[2] < 5) {
        return false;
    }
    return true;
}
exports.validate_celular = validate_celular;
exports.CEPRange = {
    'SP': /^([1][0-9]{3}|[01][0-9]{4})[0-9]{3}$/g,
    'RJ': /^[2][0-8][0-9]{3}[0-9]{3}$/g,
    'MS': /^[7][9][0-9]{3}[0-9]{3}$/g,
    'MG': /^[3][0-9]{4}[0-9]{3}$/g,
    'MT': /^[7][8][8][0-9]{2}[0-9]{3}$/g,
    'AC': /^[6][9]{2}[0-9]{2}[0-9]{3}$/g,
    'AL': /^[5][7][0-9]{3}[0-9]{3}$/g,
    'AM': /^[6][9][0-8][0-9]{2}[0-9]{3}$/g,
    'AP': /^[6][89][9][0-9]{2}[0-9]{3}$/g,
    'BA': /^[4][0-8][0-9]{3}[0-9]{3}$/g,
    'CE': /^[6][0-3][0-9]{3}[0-9]{3}$/g,
    'DF': /^[7][0-3][0-6][0-9]{2}[0-9]{3}$/g,
    'ES': /^[2][9][0-9]{3}[0-9]{3}$/g,
    'GO': /^[7][3-6][7-9][0-9]{2}[0-9]{3}$/g,
    'MA': /^[6][5][0-9]{3}[0-9]{3}$/g,
    'PA': /^[6][6-8][0-8][0-9]{2}[0-9]{3}$/g,
    'PB': /^[5][8][0-9]{3}[0-9]{3}$/g,
    'PE': /^[5][0-6][0-9]{2}[0-9]{3}$/g,
    'PI': /^[6][4][0-9]{3}[0-9]{3}$/g,
    'PR': /^[8][0-7][0-9]{3}[0-9]{3}$/g,
    'RN': /^[5][9][0-9]{3}[0-9]{3}$/g,
    'RO': /^[7][8][9][0-9]{2}[0-9]{3}$/g,
    'RR': /^[6][9][3][0-9]{2}[0-9]{3}$/g,
    'RS': /^[9][0-9]{4}[0-9]{3}$/g,
    'SC': /^[8][89][0-9]{3}[0-9]{3}$/g,
    'SE': /^[4][9][0-9]{3}[0-9]{3}$/g,
    'TO': /^[7][7][0-9]{3}[0-9]{3}$/g,
};
function validate_cep(cep) {
    var cepClean = cep.replace(/[^\d]+/g, '');
    var exp = /\d{2}\.\d{3}\-\d{3}/;
    if (!exp.test(cep) && cepClean.length !== 8) {
        return false;
    }
    return true;
}
exports.validate_cep = validate_cep;
function cep_ranges(cep) {
    cep = (cep.toString()).replace(/[^\d]+/g, '');
    cep = parseInt(cep, 10);
    var cepString = cep.toString();
    var keys = Object.keys(exports.CEPRange);
    var found;
    for (var i = void 0; i < keys.length; i++) {
        var estado = keys[i];
        var r = new RegExp(exports.CEPRange[estado]).test(cepString);
        if (r) {
            found = r;
            i = keys.length;
        }
    }
    if (!found) {
        return false;
    }
    return true;
}
exports.cep_ranges = cep_ranges;
function validate_certidao(value) {
    var certidao = utils_1.getAllDigits(value);
    var format = /[0-9]{32}/;
    if (!format.test(certidao)) {
        return false;
    }
    var dvOriginal = certidao.substr(-2);
    var dv = create_1.create_certidao(certidao);
    return dv === dvOriginal;
}
exports.validate_certidao = validate_certidao;
/**
 *
 * @param chassi
 */
function validate_chassi(chassi) {
    // 1 - Possuir o número "0" (ZERO) como 1º dígito.
    var zeroNoPrimeiroDigito = /^0/;
    if (zeroNoPrimeiroDigito.test(chassi)) {
        return false;
    }
    // 2 - Possuir espaço no chassi
    chassi = utils_1.getAllWords(chassi); // espacoNoChassi
    // 3 - Se, a partir do 4º dígito, houver uma repetição consecutiva, por mais de seis vezes, do mesmo dígito 
    // (alfabético ou numérico). Exemplos: 9BW11111119452687 e 9BWZZZ5268AAAAAAA.
    var repeticaoMaisDe6Vezes = /^.{4,}([0-9A-Z])\1{5,}/;
    if (repeticaoMaisDe6Vezes.test(chassi)) {
        return false;
    }
    // 4 - Apresente os caracteres "i", "I", "o", "O", "q", "Q".
    var caracteresiIoOqQ = /[iIoOqQ]/;
    if (caracteresiIoOqQ.test(chassi)) {
        return false;
    }
    // 5 - Os quatro últimos caracteres devem ser obrigatoriamente numéricos
    var ultimos4Numericos = /[0-9]{4}$/;
    if (!ultimos4Numericos.test(chassi)) {
        return false;
    }
    // 6 - Se possuir número de dígitos diferente de 17 (alfanuméricos). 
    if (chassi.length > 17) {
        return false;
    }
    return true;
}
exports.validate_chassi = validate_chassi;
function validate_cnae(number) {
    return true;
}
function validate_cnh(value) {
    value = utils_1.getAllDigits(value);
    var char1 = value.charAt(0);
    if (value.replace(/[^\d]/g, '').length !== 11 || char1.repeat(11) === value) {
        return false;
    }
    var check = create_1.create_cnh(value);
    return value.substr(-2) == check;
}
exports.validate_cnh = validate_cnh;
function validate_cnpj(cnpj) {
    cnpj = cnpj.replace(/[^\d]+/g, '');
    var tamanho = cnpj.length - 2;
    var digitos = cnpj.substring(tamanho);
    var resultados = create_1.create_cnpj(cnpj);
    if (resultados[0] !== parseInt(digitos.charAt(0), 10)) {
        return false;
    }
    if (resultados[1] !== parseInt(digitos.charAt(1), 10)) {
        return false;
    }
    return true;
}
exports.validate_cnpj = validate_cnpj;
function validate_contabanco(number) {
    return true;
}
// http://www.receita.fazenda.gov.br/aplicacoes/atcta/cpf/funcoes.js
function validate_cpf(strCPF) {
    strCPF = strCPF.replace(/[^\d]+/g, '');
    if (strCPF.length !== 11) {
        return false;
    }
    var restos = create_1.create_cpf(strCPF);
    if (restos[0] !== parseInt(strCPF.substring(9, 10), 10)) {
        return false;
    }
    if (restos[1] !== parseInt(strCPF.substring(10, 11), 10)) {
        return false;
    }
    return true;
}
exports.validate_cpf = validate_cpf;
function validate_cpfcnpj(number) {
    return true;
}
function validate_cns(value) {
    var cns = utils_1.getAllDigits(value);
    var definitivo = /[1-2][0-9]{10}00[0-1][0-9]/; // começam com 1 ou 2
    var provisorio = /[7-9][0-9]{14}/; // começam com 7,8 ou 9
    if (!definitivo.test(cns) && !provisorio.test(cns)) {
        return false;
    }
    var soma = 0;
    for (var i = 0; i < cns.length; i++) {
        soma += parseInt(cns[i]) * (15 - i);
    }
    return soma % 11 == 0;
}
exports.validate_cns = validate_cns;
function validate_cartaocredito(value) {
    value = utils_1.getAllDigits(value);
    var number = value.slice(0, 16);
    var mes = value.slice(16, 18);
    var ano = value.slice(18, 20);
    var cvv = value.slice(20, 23);
    var d = new Date();
    var anoAtual = (d.getFullYear() - 2000);
    if (ano && ano < anoAtual) {
        return false;
    }
    if (mes && mes < d.getMonth() + 1 && parseInt(ano) === anoAtual) {
        return false;
    }
    if (cvv) {
        var validcvv = validate_cvv(cvv);
        if (validcvv.isValid === false) {
            return false;
        }
    }
    var found;
    Object.keys(exports.creditCardValidator).forEach(function (key) {
        if (exports.creditCardValidator[key].test(number)) {
            found = key;
        }
    });
    return !!found;
}
exports.validate_cartaocredito = validate_cartaocredito;
function validate_cvv(value, maxLength) {
    if (maxLength === void 0) { maxLength = 3; }
    maxLength = maxLength instanceof Array ? maxLength : [maxLength];
    if (typeof value !== 'string') {
        return { isValid: false, isPotentiallyValid: false };
    }
    if (!/^\d*$/.test(value)) {
        return { isValid: false, isPotentiallyValid: false };
    }
    var i = 0;
    var max = value.length;
    for (; i < maxLength.length; i++) {
        if (max === maxLength[i]) {
            return { isValid: true, isPotentiallyValid: true };
        }
    }
    if (value.length < Math.min.apply(null, maxLength)) {
        return { isValid: false, isPotentiallyValid: true };
    }
    var maximum = maxLength;
    var i = 0;
    for (; i < maxLength.length; i++) {
        maximum = maxLength[i] > maximum ? maxLength[i] : maximum;
    }
    if (value.length > maximum) {
        return { isValid: false, isPotentiallyValid: false };
    }
    return { isValid: true, isPotentiallyValid: true };
}
/**
 *     A hash of valid CC abbreviations and regular expressions
    mc: Mastercard
    ec: Eurocard
    vi: Visa
    ax: American Express
    dc: Diners Club
    bl: Carte Blanch
    di: Discover
    jcb: JCB
    er: Enroute
*/
exports.creditCardValidator = {
    'mc': /5[1-5][0-9]{14}/,
    'ec': /5[1-5][0-9]{14}/,
    'vi': /4(?:[0-9]{12}|[0-9]{15})/,
    'ax': /3[47][0-9]{13}/,
    'dc': /3(?:0[0-5][0-9]{11}|[68][0-9]{12})/,
    'bl': /3(?:0[0-5][0-9]{11}|[68][0-9]{12})/,
    'di': /6011[0-9]{12}/,
    'jcb': /(?:3[0-9]{15}|(2131|1800)[0-9]{11})/,
    'er': /2(?:014|149)[0-9]{11}/
};
function validate_currency(currency) {
    if (typeof currency === 'number') {
        return true;
    }
    var regex = /^(R\$|R\$ )?((\d{1,3})(?:.[0-9]{3}){0,1}|(\d{1})(?:.[0-9]{3}){0,2}|(\d{1,7}))(\,\d{1,2})?$/g;
    return regex.test(currency);
}
exports.validate_currency = validate_currency;
function validate_data(value) {
    var values = value.split('/');
    if (values[0] > 31 || values[1] > 12 || values[2] < 1000) {
        return false;
    }
    return true;
}
function validate_ect(number) {
    number = utils_1.getAllDigits(number);
    if (number.length > 9) {
        return false;
    }
    var nodigit = number.substr(0, number.length - 1);
    var dg = create_1.create_ect(nodigit);
    if (parseInt(number[number.length - 1]) === dg) {
        return true;
    }
    return false;
}
exports.validate_ect = validate_ect;
function validate_email(email) {
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
}
function validate_endereco(number) {
    return true;
}
function validate_number(number) {
    if (number.split(',').length > 2) {
        return false;
    }
    var regexDecimal = /^\d+(?:\.\d{0,2})$/;
    var regex = /^[0-9]{0,10}[,]{1,1}[0-9]{0,4}/;
    var regexNumero = /^[0-9]{0,10}/;
    return regexDecimal.test(number) || regex.test(number) || regexNumero.test(number);
}
exports.validate_number = validate_number;
function validate_porcentagem(porcentagem) {
    porcentagem = porcentagem.split('%')[0];
    return validate_number(porcentagem);
}
exports.validate_porcentagem = validate_porcentagem;
function validate_processo(processo) {
    var processoClean = processo.replace(/\./g, '');
    processoClean = processoClean.replace(/\-/g, '');
    // const exp = /\d{7}\-\d{2}\.\d{4}\.\w{3}\.\d{4}/;
    // const expClean = /\d{13}\w{3}\d{4}/;
    // if (!exp.test(processo) && !expClean.test(processoClean)) {
    //   return false;
    // }
    var processoValidado = create_1.create_processo(processo);
    if (parseInt(processoClean) !== parseInt(utils_1.getAllDigits(processoValidado))) {
        return false;
    }
    return true;
}
exports.validate_processo = validate_processo;
function validate_pispasep(number) {
    number = utils_1.getAllDigits(number);
    var nis = utils_1.fillString(number, 11, '0');
    var regex = /\d{11}/; // /^\d{3}\.\d{5}\.\d{2}\-\d{1}$/;
    if (!regex.test(nis)) {
        return false;
    }
    var digit = create_1.create_pispasep(number);
    return nis[10].toString() == digit.toString();
}
exports.validate_pispasep = validate_pispasep;
function validate_renavam(renavam) {
    var renavamClean = renavam.replace(/\./g, '');
    renavamClean = renavamClean.replace(/\-/g, '');
    var dv = create_1.create_renavam(renavam);
    var tam = renavam.length;
    var digitos = renavam.substr(tam - 1, 1);
    if (digitos.charCodeAt(0) - 48 === dv) {
        return true;
    }
    else {
        return false;
    }
}
exports.validate_renavam = validate_renavam;
function validate_rg(rg) {
    var rgClean = rg.replace(/\./g, '');
    rgClean = rgClean.replace(/-/g, '');
    var exp = /[a-z]{2}\-\d{2}\.\d{3}\.\d{3}/;
    var expClean = /[a-z]{2}\d{8}/;
    var state = rg.substr(0, 2).toUpperCase();
    if (!exp.test(rg) && !expClean.test(rgClean) && !(state in exports.CEPRange)) {
        return false;
    }
    if (rg_1.default[state]) {
        var validateState = rg_1.default[state];
        return validateState(rg);
    }
    return true;
}
exports.validate_rg = validate_rg;
function validate_senha(value, options) {
    if (options === void 0) { options = {}; }
    var finalregex = '^';
    //   ^	The password string will start this way
    // (?=.*[a-z])	The string must contain at least 1 lowercase alphabetical character
    if (options.lowercase !== false) {
        finalregex = finalregex + '(?=.*[a-z])';
    }
    // (?=.*[A-Z])	The string must contain at least 1 uppercase alphabetical character
    if (options.uppercase !== false) {
        finalregex = finalregex + '(?=.*[A-Z])';
    }
    // (?=.*[0-9])	The string must contain at least 1 numeric character
    if (options.numeric !== false) {
        finalregex = finalregex + '(?=.*[0-9])';
    }
    // (?=.*[!@#\$%\^&\*])	The string must contain at least one special character, but we are escaping reserved RegEx characters to avoid conflict
    if (options.numeric !== false) {
        finalregex = finalregex + '(?=.*[!@#\\$%\\^&\\*])';
    }
    // (?=.{8,})	The string must be eight characters or longer
    if (!options.size) {
        options.size = 8;
    }
    finalregex = finalregex + ("(?=.{" + options.size + ",})");
    var regex = new RegExp(finalregex);
    return regex.test(value);
}
function validate_site(value) {
    var re = /(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&=]*)/g;
    return re.test(String(value).toLowerCase());
}
function validate_sped(sped) {
}
exports.validate_sped = validate_sped;
function validate_telefone(tel) {
    var telClean = tel.replace(/[^\d]+/g, '');
    tel = tel.replace(/_/g, '');
    if (!(telClean.length === 10 || telClean.length === 11)) {
        return false;
    }
    if (telClean[0] == 0 || telClean[2] == 0) {
        return false;
    }
    return true;
}
exports.validate_telefone = validate_telefone;
function validate_time(time, options) {
    if (options === void 0) { options = {}; }
    var value = time.toString();
    if (options.diario) {
        var expression = /^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/;
        return expression.test(value);
    }
    else {
        var expression = /^([0-9]?[0-9]):([0-5][0-9])(:[0-5][0-9])?$/;
        return expression.test(value);
    }
}
exports.validate_time = validate_time;
function validate_titulo(titulo) {
    var tituloClean = titulo.replace(/\./g, '');
    var exp = /\d{4}\.\d{4}\.\d{4}/;
    var expClean = /\d{4}\d{4}\d{4}/;
    if (!exp.test(tituloClean) && !expClean.test(tituloClean)) {
        return false;
    }
    var tam = tituloClean.length;
    var dig;
    try {
        dig = create_1.create_titulo_atual(tituloClean);
        // const noDv = tituloClean.substr(0, tam - 2);
        // dig = create_titulo(noDv);
    }
    catch (e) {
        return false;
    }
    var digitos = tituloClean.substr(tam - 2, 2);
    if (digitos === dig) {
        return true;
    }
    else {
        return false;
    }
}
exports.validate_titulo = validate_titulo;
function validate_username(value) {
    var re = /^[a-z0-9_-]{3,16}$/igm;
    return re.test(String(value).toLowerCase());
}
exports.validateBr = {
    aih: validate_aih,
    cartaocredito: validate_cartaocredito,
    celular: validate_celular,
    cep: validate_cep,
    certidao: validate_certidao,
    chassi: validate_chassi,
    cnae: validate_cnae,
    cnh: validate_cnh,
    cnpj: validate_cnpj,
    cns: validate_cns,
    contabanco: validate_contabanco,
    cpf: validate_cpf,
    cpfcnpj: validate_cpfcnpj,
    currency: validate_currency,
    data: validate_data,
    ect: validate_ect,
    email: validate_email,
    endereco: validate_endereco,
    inscricaoestadual: inscricaoestadual_1.validate_inscricaoestadual,
    iptu: iptu_1.validate_iptu,
    number: validate_number,
    porcentagem: validate_porcentagem,
    pispasep: validate_pispasep,
    placa: placa_1.validate_placa,
    processo: validate_processo,
    renavam: validate_renavam,
    rg: validate_rg,
    senha: validate_senha,
    site: validate_site,
    sped: validate_sped,
    telefone: validate_telefone,
    time: validate_time,
    titulo: validate_titulo,
    username: validate_username
};
//# sourceMappingURL=validate.js.map