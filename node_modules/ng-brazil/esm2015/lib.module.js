var NgBrazil_1;
import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { cpf } from './cpf/validator';
import { CPFValidator } from './cpf/directive';
import { CPFPipe } from './cpf/pipe';
import { cnpj } from './cnpj/validator';
import { CNPJValidator } from './cnpj/directive';
import { CNPJPipe } from './cnpj/pipe';
import { telefone } from './telefone/validator';
import { TelefoneValidator } from './telefone/directive';
import { TelefonePipe } from './telefone/pipe';
import { celular } from './celular/validator';
import { CelularValidator } from './celular/directive';
import { CelularPipe } from './celular/pipe';
import { inscricaoestadual } from './inscricaoestadual/validator';
import { InscricaoEstadualValidator } from './inscricaoestadual/directive';
import { InscricaoEstadualPipe } from './inscricaoestadual/pipe';
import { CEPValidator } from './cep/directive';
import { CEPPipe } from './cep/pipe';
import { cep } from './cep/validator';
import { currency } from './currency/validator';
import { CURRENCYValidator } from './currency/directive';
import { CURRENCYPipe } from './currency/pipe';
import { number } from './number/validator';
import { NUMBERValidator } from './number/directive';
import { NUMBERPipe } from './number/pipe';
import { placa } from './placa/validator';
import { PLACAValidator } from './placa/directive';
import { PLACAPipe } from './placa/pipe';
import { percentage } from './percentage/validator';
import { PERCENTAGEValidator } from './percentage/directive';
import { PERCENTAGEPipe } from './percentage/pipe';
import { renavam } from './renavam/validator';
import { RenavamValidator } from './renavam/directive';
import { RenavamPipe } from './renavam/pipe';
import { pispasep } from './pispasep/validator';
import { PispasepValidator } from './pispasep/directive';
import { PispasepPipe } from './pispasep/pipe';
import { rg } from './rg/validator';
import { RGValidator } from './rg/directive';
import { RGPipe } from './rg/pipe';
import { time } from './time/validator';
import { TIMEValidator } from './time/directive';
import { TIMEPipe } from './time/pipe';
import { titulo } from './titulo/validator';
import { TITULOValidator } from './titulo/directive';
import { TITULOPipe } from './titulo/pipe';
import { utilsBr } from 'js-brasil';
import { TextMaskModule } from './angular2TextMask';
export const TextMask = {
    TextMaskModule
};
export const NgBrazilValidators = {
    cpf,
    cnpj,
    celular,
    cep,
    currency,
    inscricaoestadual,
    number,
    pispasep,
    placa,
    percentage,
    renavam,
    rg,
    telefone,
    time,
    titulo
};
export const MASKS = utilsBr.MASKS;
export const CustomDirectives = [
    CelularValidator,
    CelularPipe,
    CEPValidator,
    CEPPipe,
    CPFValidator,
    CPFPipe,
    CNPJValidator,
    CNPJPipe,
    CURRENCYValidator,
    CURRENCYPipe,
    InscricaoEstadualValidator,
    InscricaoEstadualPipe,
    NUMBERValidator,
    NUMBERPipe,
    PERCENTAGEValidator,
    PERCENTAGEPipe,
    PispasepValidator,
    PispasepPipe,
    PLACAValidator,
    PLACAPipe,
    RenavamValidator,
    RenavamPipe,
    RGValidator,
    RGPipe,
    TelefoneValidator,
    TelefonePipe,
    TIMEValidator,
    TIMEPipe,
    TITULOValidator,
    TITULOPipe
];
export const NgBrDirectives = {
    CelularValidator,
    CelularPipe,
    CEPValidator,
    CEPPipe,
    CNPJValidator,
    CNPJPipe,
    CPFValidator,
    CPFPipe,
    CURRENCYValidator,
    CURRENCYPipe,
    InscricaoEstadualValidator,
    InscricaoEstadualPipe,
    NUMBERValidator,
    NUMBERPipe,
    PERCENTAGEValidator,
    PERCENTAGEPipe,
    PispasepValidator,
    PispasepPipe,
    PLACAValidator,
    PLACAPipe,
    RGValidator,
    RGPipe,
    RenavamValidator,
    RenavamPipe,
    TelefoneValidator,
    TelefonePipe,
    TIMEValidator,
    TIMEPipe,
    TITULOValidator,
    TITULOPipe
};
let NgBrazil = NgBrazil_1 = class NgBrazil {
    static forRoot() {
        return {
            ngModule: NgBrazil_1
        };
    }
};
NgBrazil = NgBrazil_1 = __decorate([
    NgModule({
        imports: [],
        declarations: [
            CustomDirectives
        ],
        exports: [
            CustomDirectives
        ]
    })
], NgBrazil);
export { NgBrazil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWJyYXppbC8iLCJzb3VyY2VzIjpbImxpYi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUc5RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFckMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVqRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNy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O0lBQ2pCLFlBQVk7SUFDWixjQUFjO0lBQ2QsU0FBUztJQUNULGdCQUFnQjtJQUNoQixXQUFXO0lBQ1gsV0FBVztJQUNYLE1BQU07SUFDTixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLGFBQWE7SUFDYixRQUFRO0lBQ1IsZUFBZTtJQUNmLFVBQVU7Q0FDWCxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHO0lBQzVCLGdCQUFnQjtJQUNoQixXQUFXO0lBQ1gsWUFBWTtJQUNaLE9BQU87SUFDUCxhQUFhO0lBQ2IsUUFBUTtJQUNSLFlBQVk7SUFDWixPQUFPO0lBQ1AsaUJBQWlCO0lBQ2pCLFlBQVk7SUFDWiwwQkFBMEI7SUFDMUIscUJBQXFCO0lBQ3JCLGVBQWU7SUFDZixVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGNBQWM7SUFDZCxpQkFBaUI7SUFDakIsWUFBWTtJQUNaLGNBQWM7SUFDZCxTQUFTO0lBQ1QsV0FBVztJQUNYLE1BQU07SUFDTixnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLGlCQUFpQjtJQUNqQixZQUFZO0lBQ1osYUFBYTtJQUNiLFFBQVE7SUFDUixlQUFlO0lBQ2YsVUFBVTtDQUNYLENBQUM7QUFZRixJQUFNLFFBQVEsZ0JBQWQsTUFBTSxRQUFRO0lBQ0wsTUFBTSxDQUFDLE9BQU87UUFDbkIsT0FBTztZQUNMLFFBQVEsRUFBRSxVQUFRO1NBQ25CLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTtBQU5LLFFBQVE7SUFWYixRQUFRLENBQUM7UUFDUixPQUFPLEVBQUUsRUFDUjtRQUNELFlBQVksRUFBRTtZQUNaLGdCQUFnQjtTQUNqQjtRQUNELE9BQU8sRUFBRTtZQUNQLGdCQUFnQjtTQUNqQjtLQUNGLENBQUM7R0FDSSxRQUFRLENBTWI7QUFDRCxPQUFPLEVBQ0wsUUFBUSxFQUNULENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgY3BmIH0gZnJvbSAnLi9jcGYvdmFsaWRhdG9yJztcclxuaW1wb3J0IHsgQ1BGVmFsaWRhdG9yIH0gZnJvbSAnLi9jcGYvZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQ1BGUGlwZSB9IGZyb20gJy4vY3BmL3BpcGUnO1xyXG5cclxuaW1wb3J0IHsgY25waiB9IGZyb20gJy4vY25wai92YWxpZGF0b3InO1xyXG5pbXBvcnQgeyBDTlBKVmFsaWRhdG9yIH0gZnJvbSAnLi9jbnBqL2RpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IENOUEpQaXBlIH0gZnJvbSAnLi9jbnBqL3BpcGUnO1xyXG5cclxuaW1wb3J0IHsgdGVsZWZvbmUgfSBmcm9tICcuL3RlbGVmb25lL3ZhbGlkYXRvcic7XHJcbmltcG9ydCB7IFRlbGVmb25lVmFsaWRhdG9yIH0gZnJvbSAnLi90ZWxlZm9uZS9kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBUZWxlZm9uZVBpcGUgfSBmcm9tICcuL3RlbGVmb25lL3BpcGUnO1xyXG5cclxuaW1wb3J0IHsgY2VsdWxhciB9IGZyb20gJy4vY2VsdWxhci92YWxpZGF0b3InO1xyXG5pbXBvcnQgeyBDZWx1bGFyVmFsaWRhdG9yIH0gZnJvbSAnLi9jZWx1bGFyL2RpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IENlbHVsYXJQaXBlIH0gZnJvbSAnLi9jZWx1bGFyL3BpcGUnO1xyXG5cclxuaW1wb3J0IHsgaW5zY3JpY2FvZXN0YWR1YWwgfSBmcm9tICcuL2luc2NyaWNhb2VzdGFkdWFsL3ZhbGlkYXRvcic7XHJcbmltcG9ydCB7IEluc2NyaWNhb0VzdGFkdWFsVmFsaWRhdG9yIH0gZnJvbSAnLi9pbnNjcmljYW9lc3RhZHVhbC9kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBJbnNjcmljYW9Fc3RhZHVhbFBpcGUgfSBmcm9tICcuL2luc2NyaWNhb2VzdGFkdWFsL3BpcGUnO1xyXG5cclxuaW1wb3J0IHsgQ0VQVmFsaWRhdG9yIH0gZnJvbSAnLi9jZXAvZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQ0VQUGlwZSB9IGZyb20gJy4vY2VwL3BpcGUnO1xyXG5pbXBvcnQgeyBjZXAgfSBmcm9tICcuL2NlcC92YWxpZGF0b3InO1xyXG5cclxuXHJcbmltcG9ydCB7IGN1cnJlbmN5IH0gZnJvbSAnLi9jdXJyZW5jeS92YWxpZGF0b3InO1xyXG5pbXBvcnQgeyBDVVJSRU5DWVZhbGlkYXRvciB9IGZyb20gJy4vY3VycmVuY3kvZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQ1VSUkVOQ1lQaXBlIH0gZnJvbSAnLi9jdXJyZW5jeS9waXBlJztcclxuXHJcbmltcG9ydCB7IG51bWJlciB9IGZyb20gJy4vbnVtYmVyL3ZhbGlkYXRvcic7XHJcbmltcG9ydCB7IE5VTUJFUlZhbGlkYXRvciB9IGZyb20gJy4vbnVtYmVyL2RpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IE5VTUJFUlBpcGUgfSBmcm9tICcuL251bWJlci9waXBlJztcclxuXHJcblxyXG5cclxuaW1wb3J0IHsgcGxhY2EgfSBmcm9tICcuL3BsYWNhL3ZhbGlkYXRvcic7XHJcbmltcG9ydCB7IFBMQUNBVmFsaWRhdG9yIH0gZnJvbSAnLi9wbGFjYS9kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBQTEFDQVBpcGUgfSBmcm9tICcuL3BsYWNhL3BpcGUnO1xyXG5cclxuaW1wb3J0IHsgcGVyY2VudGFnZSB9IGZyb20gJy4vcGVyY2VudGFnZS92YWxpZGF0b3InO1xyXG5pbXBvcnQgeyBQRVJDRU5UQUdFVmFsaWRhdG9yIH0gZnJvbSAnLi9wZXJjZW50YWdlL2RpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFBFUkNFTlRBR0VQaXBlIH0gZnJvbSAnLi9wZXJjZW50YWdlL3BpcGUnO1xyXG5cclxuaW1wb3J0IHsgcmVuYXZhbSB9IGZyb20gJy4vcmVuYXZhbS92YWxpZGF0b3InO1xyXG5pbXBvcnQgeyBSZW5hdmFtVmFsaWRhdG9yIH0gZnJvbSAnLi9yZW5hdmFtL2RpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFJlbmF2YW1QaXBlIH0gZnJvbSAnLi9yZW5hdmFtL3BpcGUnO1xyXG5cclxuaW1wb3J0IHsgcGlzcGFzZXAgfSBmcm9tICcuL3Bpc3Bhc2VwL3ZhbGlkYXRvcic7XHJcbmltcG9ydCB7IFBpc3Bhc2VwVmFsaWRhdG9yIH0gZnJvbSAnLi9waXNwYXNlcC9kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBQaXNwYXNlcFBpcGUgfSBmcm9tICcuL3Bpc3Bhc2VwL3BpcGUnO1xyXG5cclxuaW1wb3J0IHsgcmcgfSBmcm9tICcuL3JnL3ZhbGlkYXRvcic7XHJcbmltcG9ydCB7IFJHVmFsaWRhdG9yIH0gZnJvbSAnLi9yZy9kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBSR1BpcGUgfSBmcm9tICcuL3JnL3BpcGUnO1xyXG5cclxuaW1wb3J0IHsgdGltZSB9IGZyb20gJy4vdGltZS92YWxpZGF0b3InO1xyXG5pbXBvcnQgeyBUSU1FVmFsaWRhdG9yIH0gZnJvbSAnLi90aW1lL2RpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFRJTUVQaXBlIH0gZnJvbSAnLi90aW1lL3BpcGUnO1xyXG5cclxuaW1wb3J0IHsgdGl0dWxvIH0gZnJvbSAnLi90aXR1bG8vdmFsaWRhdG9yJztcclxuaW1wb3J0IHsgVElUVUxPVmFsaWRhdG9yIH0gZnJvbSAnLi90aXR1bG8vZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgVElUVUxPUGlwZSB9IGZyb20gJy4vdGl0dWxvL3BpcGUnO1xyXG5pbXBvcnQgeyB1dGlsc0JyIH0gZnJvbSAnanMtYnJhc2lsJztcclxuXHJcbmltcG9ydCB7IFRleHRNYXNrTW9kdWxlIH0gZnJvbSAnLi9hbmd1bGFyMlRleHRNYXNrJztcclxuaW1wb3J0IHsgQnJvd3Nlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRleHRNYXNrID0ge1xyXG4gIFRleHRNYXNrTW9kdWxlXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgTmdCcmF6aWxWYWxpZGF0b3JzOiBhbnkgPSB7XHJcbiAgY3BmLFxyXG4gIGNucGosXHJcbiAgY2VsdWxhcixcclxuICBjZXAsXHJcbiAgY3VycmVuY3ksXHJcbiAgaW5zY3JpY2FvZXN0YWR1YWwsXHJcbiAgbnVtYmVyLFxyXG4gIHBpc3Bhc2VwLFxyXG4gIHBsYWNhLFxyXG4gIHBlcmNlbnRhZ2UsXHJcbiAgcmVuYXZhbSxcclxuICByZyxcclxuICB0ZWxlZm9uZSxcclxuICB0aW1lLFxyXG4gIHRpdHVsb1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTUFTS1MgPSB1dGlsc0JyLk1BU0tTO1xyXG5leHBvcnQgY29uc3QgQ3VzdG9tRGlyZWN0aXZlcyA9IFtcclxuICBDZWx1bGFyVmFsaWRhdG9yLFxyXG4gIENlbHVsYXJQaXBlLFxyXG4gIENFUFZhbGlkYXRvcixcclxuICBDRVBQaXBlLFxyXG4gIENQRlZhbGlkYXRvcixcclxuICBDUEZQaXBlLFxyXG4gIENOUEpWYWxpZGF0b3IsXHJcbiAgQ05QSlBpcGUsXHJcbiAgQ1VSUkVOQ1lWYWxpZGF0b3IsXHJcbiAgQ1VSUkVOQ1lQaXBlLFxyXG4gIEluc2NyaWNhb0VzdGFkdWFsVmFsaWRhdG9yLFxyXG4gIEluc2NyaWNhb0VzdGFkdWFsUGlwZSxcclxuICBOVU1CRVJWYWxpZGF0b3IsXHJcbiAgTlVNQkVSUGlwZSxcclxuICBQRVJDRU5UQUdFVmFsaWRhdG9yLFxyXG4gIFBFUkNFTlRBR0VQaXBlLFxyXG4gIFBpc3Bhc2VwVmFsaWRhdG9yLFxyXG4gIFBpc3Bhc2VwUGlwZSxcclxuICBQTEFDQVZhbGlkYXRvcixcclxuICBQTEFDQVBpcGUsXHJcbiAgUmVuYXZhbVZhbGlkYXRvcixcclxuICBSZW5hdmFtUGlwZSxcclxuICBSR1ZhbGlkYXRvcixcclxuICBSR1BpcGUsXHJcbiAgVGVsZWZvbmVWYWxpZGF0b3IsXHJcbiAgVGVsZWZvbmVQaXBlLFxyXG4gIFRJTUVWYWxpZGF0b3IsXHJcbiAgVElNRVBpcGUsXHJcbiAgVElUVUxPVmFsaWRhdG9yLFxyXG4gIFRJVFVMT1BpcGVcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBOZ0JyRGlyZWN0aXZlcyA9IHtcclxuICBDZWx1bGFyVmFsaWRhdG9yLFxyXG4gIENlbHVsYXJQaXBlLFxyXG4gIENFUFZhbGlkYXRvcixcclxuICBDRVBQaXBlLFxyXG4gIENOUEpWYWxpZGF0b3IsXHJcbiAgQ05QSlBpcGUsXHJcbiAgQ1BGVmFsaWRhdG9yLFxyXG4gIENQRlBpcGUsXHJcbiAgQ1VSUkVOQ1lWYWxpZGF0b3IsXHJcbiAgQ1VSUkVOQ1lQaXBlLFxyXG4gIEluc2NyaWNhb0VzdGFkdWFsVmFsaWRhdG9yLFxyXG4gIEluc2NyaWNhb0VzdGFkdWFsUGlwZSxcclxuICBOVU1CRVJWYWxpZGF0b3IsXHJcbiAgTlVNQkVSUGlwZSxcclxuICBQRVJDRU5UQUdFVmFsaWRhdG9yLFxyXG4gIFBFUkNFTlRBR0VQaXBlLFxyXG4gIFBpc3Bhc2VwVmFsaWRhdG9yLFxyXG4gIFBpc3Bhc2VwUGlwZSxcclxuICBQTEFDQVZhbGlkYXRvcixcclxuICBQTEFDQVBpcGUsXHJcbiAgUkdWYWxpZGF0b3IsXHJcbiAgUkdQaXBlLFxyXG4gIFJlbmF2YW1WYWxpZGF0b3IsXHJcbiAgUmVuYXZhbVBpcGUsXHJcbiAgVGVsZWZvbmVWYWxpZGF0b3IsXHJcbiAgVGVsZWZvbmVQaXBlLFxyXG4gIFRJTUVWYWxpZGF0b3IsXHJcbiAgVElNRVBpcGUsXHJcbiAgVElUVUxPVmFsaWRhdG9yLFxyXG4gIFRJVFVMT1BpcGVcclxufTtcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gIF0sXHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBDdXN0b21EaXJlY3RpdmVzXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBDdXN0b21EaXJlY3RpdmVzXHJcbiAgXVxyXG59KVxyXG5jbGFzcyBOZ0JyYXppbCB7XHJcbiAgcHVibGljIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IE5nQnJhemlsXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5leHBvcnQge1xyXG4gIE5nQnJhemlsXHJcbn1cclxuIl19