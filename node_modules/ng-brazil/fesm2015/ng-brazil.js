import { __decorate, __param } from 'tslib';
import { forwardRef, Directive, Pipe, RendererFactory2, ElementRef, Optional, Inject, Input, Injectable, NgModule } from '@angular/core';
import { Validators, NG_VALIDATORS, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';
import { utilsBr, validateBr, maskBr } from 'js-brasil';
import { ÉµgetDOM, BrowserModule } from '@angular/platform-browser';
import { createTextMaskInputElement } from 'text-mask-core/dist/textMaskCore';

const cpf = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.cpf(v) ? null : { cpf: true };
};

const CPF_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CPFValidator),
    multi: true
};
let CPFValidator = class CPFValidator {
    validate(c) {
        return cpf(c);
    }
};
CPFValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[cpf][formControlName],[cpf][formControl],[cpf][ngModel]',
        providers: [CPF_VALIDATOR]
    })
], CPFValidator);

let CPFPipe = class CPFPipe {
    transform(cpfValue) {
        return maskBr.cpf(cpfValue);
    }
};
CPFPipe = __decorate([
    Pipe({
        name: 'cpf',
    })
], CPFPipe);

const cnpj = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.cnpj(v) ? null : { cnpj: true };
};

const CNPJ_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CNPJValidator),
    multi: true
};
let CNPJValidator = class CNPJValidator {
    validate(c) {
        return cnpj(c);
    }
};
CNPJValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[cnpj][formControlName],[cnpj][formControl],[cnpj][ngModel]',
        providers: [CNPJ_VALIDATOR]
    })
], CNPJValidator);

let CNPJPipe = class CNPJPipe {
    transform(cnpjValue) {
        return maskBr.cnpj(cnpjValue);
    }
};
CNPJPipe = __decorate([
    Pipe({
        name: 'cnpj',
    })
], CNPJPipe);

const telefone = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.telefone(v) ? null : { telefone: true };
};

const TELEFONE_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => TelefoneValidator),
    multi: true
};
let TelefoneValidator = class TelefoneValidator {
    validate(c) {
        return telefone(c);
    }
};
TelefoneValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[telefone][formControlName],[telefone][formControl],[telefone][ngModel]',
        providers: [TELEFONE_VALIDATOR]
    })
], TelefoneValidator);

let TelefonePipe = class TelefonePipe {
    transform(telefoneValue) {
        return maskBr.telefone(telefoneValue);
    }
};
TelefonePipe = __decorate([
    Pipe({
        name: 'telefone',
    })
], TelefonePipe);

const celular = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.celular(v) ? null : { celular: true };
};

const CELULAR_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CelularValidator),
    multi: true
};
let CelularValidator = class CelularValidator {
    validate(c) {
        return celular(c);
    }
};
CelularValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[celular][formControlName],[celular][formControl],[celular][ngModel]',
        providers: [CELULAR_VALIDATOR]
    })
], CelularValidator);

let CelularPipe = class CelularPipe {
    transform(celularValue) {
        return maskBr.celular(celularValue);
    }
};
CelularPipe = __decorate([
    Pipe({
        name: 'celular',
    })
], CelularPipe);

const inscricaoestadual = (estado) => {
    return (control) => {
        if (utilsBr.isPresent(Validators.required(control))) {
            return null;
        }
        const v = control.value;
        return validateBr.inscricaoestadual(v, estado) ? null : { inscricaoestadual: true };
    };
};

const INSCRICAOESTADUAL_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => InscricaoEstadualValidator),
    multi: true
};
let InscricaoEstadualValidator = class InscricaoEstadualValidator {
    validate(c) {
        return inscricaoestadual('mg')(c);
    }
};
InscricaoEstadualValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[inscricaoestadual][formControlName],[inscricaoestadual][formControl],[inscricaoestadual][ngModel]',
        providers: [INSCRICAOESTADUAL_VALIDATOR]
    })
], InscricaoEstadualValidator);

let InscricaoEstadualPipe = class InscricaoEstadualPipe {
    transform(inscricaoestadualValue, estado) {
        return maskBr.inscricaoestadual(inscricaoestadualValue, estado);
    }
};
InscricaoEstadualPipe = __decorate([
    Pipe({
        name: 'inscricaoestadual',
    })
], InscricaoEstadualPipe);

const cep = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.cep(v) ? null : { cep: true };
};

const CEP_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CEPValidator),
    multi: true
};
let CEPValidator = class CEPValidator {
    validate(c) {
        return cep(c);
    }
};
CEPValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[cep][formControlName],[cep][formControl],[cep][ngModel]',
        providers: [CEP_VALIDATOR]
    })
], CEPValidator);

let CEPPipe = class CEPPipe {
    transform(cepValue) {
        return maskBr.cep(cepValue);
    }
};
CEPPipe = __decorate([
    Pipe({
        name: 'cep',
    })
], CEPPipe);

const currency = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.currency(v) ? null : { currency: true };
};

const CURRENCY_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CURRENCYValidator),
    multi: true
};
let CURRENCYValidator = class CURRENCYValidator {
    validate(c) {
        return currency(c);
    }
};
CURRENCYValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[currency][formControlName],[currency][formControl],[currency][ngModel]',
        providers: [CURRENCY_VALIDATOR]
    })
], CURRENCYValidator);

let CURRENCYPipe = class CURRENCYPipe {
    transform(currencyValue) {
        return maskBr.currency(currencyValue);
    }
};
CURRENCYPipe = __decorate([
    Pipe({
        name: 'currencyBrazil',
    })
], CURRENCYPipe);

const number = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.number(v) ? null : { number: true };
};

const NUMBER_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => NUMBERValidator),
    multi: true
};
let NUMBERValidator = class NUMBERValidator {
    validate(c) {
        return number(c);
    }
};
NUMBERValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[number][formControlName],[number][formControl],[number][ngModel]',
        providers: [NUMBER_VALIDATOR]
    })
], NUMBERValidator);

let NUMBERPipe = class NUMBERPipe {
    transform(numberValue) {
        return maskBr.number(numberValue);
    }
};
NUMBERPipe = __decorate([
    Pipe({
        name: 'numberBrazil',
    })
], NUMBERPipe);

const placa = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.placa(v) ? null : { placa: true };
};

const PLACA_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => PLACAValidator),
    multi: true
};
let PLACAValidator = class PLACAValidator {
    validate(c) {
        return placa(c);
    }
};
PLACAValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[placa][formControlName],[placa][formControl],[placa][ngModel]',
        providers: [PLACA_VALIDATOR]
    })
], PLACAValidator);

let PLACAPipe = class PLACAPipe {
    transform(placaValue) {
        return maskBr.placa(placaValue);
    }
};
PLACAPipe = __decorate([
    Pipe({
        name: 'placa'
    })
], PLACAPipe);

const percentage = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.porcentagem(v) ? null : { percentage: true };
};

const PERCENTAGE_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => PERCENTAGEValidator),
    multi: true
};
let PERCENTAGEValidator = class PERCENTAGEValidator {
    validate(c) {
        return percentage(c);
    }
};
PERCENTAGEValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[percentage][formControlName],[percentage][formControl],[percentage][ngModel]',
        providers: [PERCENTAGE_VALIDATOR]
    })
], PERCENTAGEValidator);

let PERCENTAGEPipe = class PERCENTAGEPipe {
    transform(percentageValue) {
        return maskBr.porcentagem(percentageValue);
    }
};
PERCENTAGEPipe = __decorate([
    Pipe({
        name: 'percentage',
    })
], PERCENTAGEPipe);

const renavam = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.renavam(v) ? null : { renavam: true };
};

const RENAVAM_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => RenavamValidator),
    multi: true
};
let RenavamValidator = class RenavamValidator {
    validate(c) {
        return renavam(c);
    }
};
RenavamValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[renavam][formControlName],[renavam][formControl],[renavam][ngModel]',
        providers: [RENAVAM_VALIDATOR]
    })
], RenavamValidator);

let RenavamPipe = class RenavamPipe {
    transform(renavamValue) {
        return maskBr.renavam(renavamValue);
    }
};
RenavamPipe = __decorate([
    Pipe({
        name: 'renavam',
    })
], RenavamPipe);

const pispasep = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.pispasep(v) ? null : { pispasep: true };
};

const PISPASE_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => PispasepValidator),
    multi: true
};
let PispasepValidator = class PispasepValidator {
    validate(c) {
        return pispasep(c);
    }
};
PispasepValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[pispasep][formControlName],[pispasep][formControl],[pispasep][ngModel]',
        providers: [PISPASE_VALIDATOR]
    })
], PispasepValidator);

let PispasepPipe = class PispasepPipe {
    transform(pispasepValue) {
        return maskBr.pispasep(pispasepValue);
    }
};
PispasepPipe = __decorate([
    Pipe({
        name: 'pispasep',
    })
], PispasepPipe);

const rg = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.rg(v) ? null : { rg: true };
};

const RG_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => RGValidator),
    multi: true
};
let RGValidator = class RGValidator {
    validate(c) {
        return rg(c);
    }
};
RGValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[rg][formControlName],[rg][formControl],[rg][ngModel]',
        providers: [RG_VALIDATOR]
    })
], RGValidator);

let RGPipe = class RGPipe {
    transform(rgValue) {
        return maskBr.rg(rgValue);
    }
};
RGPipe = __decorate([
    Pipe({
        name: 'rg',
    })
], RGPipe);

const time = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.time(v) ? null : { time: true };
};

const TIME_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => TIMEValidator),
    multi: true
};
let TIMEValidator = class TIMEValidator {
    validate(c) {
        return time(c);
    }
};
TIMEValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[time][formControlName],[time][formControl],[time][ngModel]',
        providers: [TIME_VALIDATOR]
    })
], TIMEValidator);

let TIMEPipe = class TIMEPipe {
    transform(timeValue) {
        return maskBr.time(timeValue);
    }
};
TIMEPipe = __decorate([
    Pipe({
        name: 'time',
    })
], TIMEPipe);

const titulo = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.titulo(v) ? null : { titulo: true };
};

const TITULO_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => TITULOValidator),
    multi: true
};
let TITULOValidator = class TITULOValidator {
    validate(c) {
        return titulo(c);
    }
};
TITULOValidator = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[titulo][formControlName],[titulo][formControl],[titulo][ngModel]',
        providers: [TITULO_VALIDATOR]
    })
], TITULOValidator);

let TITULOPipe = class TITULOPipe {
    transform(tituloValue) {
        return maskBr.titulo(tituloValue);
    }
};
TITULOPipe = __decorate([
    Pipe({
        name: 'titulo'
    })
], TITULOPipe);

class TextMaskConfig {
}
const MASKEDINPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => MaskedInputDirective),
    multi: true
};
/**
 * We must check whether the agent is Android because composition events
 * behave differently between iOS and Android.
 */
function _isAndroid() {
    const userAgent = ÉµgetDOM() ? ÉµgetDOM().getUserAgent() : '';
    return /android (\d+)/.test(userAgent.toLowerCase());
}
let MaskedInputDirective = class MaskedInputDirective {
    constructor(rendererFactory, _elementRef, _compositionMode) {
        this._elementRef = _elementRef;
        this._compositionMode = _compositionMode;
        this.textMaskConfig = {
            mask: [],
            guide: true,
            placeholderChar: '_',
            pipe: undefined,
            keepCharPositions: false,
        };
        this.onChange = (_) => { };
        this.onTouched = () => { };
        /** Whether the user is creating a composition string (IME events). */
        this._composing = false;
        this._renderer = rendererFactory.createRenderer(null, null);
        if (this._compositionMode == null) {
            this._compositionMode = !_isAndroid();
        }
    }
    ngOnChanges(changes) {
        this._setupMask(true);
        if (this.textMaskInputElement !== undefined) {
            this.textMaskInputElement.update(this.inputElement.value);
        }
    }
    writeValue(value) {
        this._setupMask();
        // set the initial value for cases where the mask is disabled
        const normalizedValue = value == null ? '' : value;
        this._renderer.setProperty(this.inputElement, 'value', normalizedValue);
        if (this.textMaskInputElement !== undefined) {
            this.textMaskInputElement.update(value);
        }
    }
    registerOnChange(fn) { this.onChange = fn; }
    registerOnTouched(fn) { this.onTouched = fn; }
    setDisabledState(isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    }
    _handleInput(value) {
        if (!this._compositionMode || (this._compositionMode && !this._composing)) {
            this._setupMask();
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(value);
                // get the updated value
                value = this.inputElement.value;
                this.onChange(value);
            }
        }
    }
    _setupMask(create = false) {
        if (!this.inputElement) {
            if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {
                // `textMask` directive is used directly on an input element
                this.inputElement = this._elementRef.nativeElement;
            }
            else {
                // `textMask` directive is used on an abstracted input element, `md-input-container`, etc
                this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];
            }
        }
        if (this.inputElement && create) {
            this.textMaskInputElement = createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));
        }
    }
    _compositionStart() { this._composing = true; }
    _compositionEnd(value) {
        this._composing = false;
        this._compositionMode && this._handleInput(value);
    }
};
MaskedInputDirective.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: ElementRef },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }
];
__decorate([
    Input('textMask')
], MaskedInputDirective.prototype, "textMaskConfig", void 0);
MaskedInputDirective = __decorate([
    Injectable(),
    Directive({
        host: {
            '(input)': '_handleInput($event.target.value)',
            '(blur)': 'onTouched()',
            '(compositionstart)': '_compositionStart()',
            '(compositionend)': '_compositionEnd($event.target.value)'
        },
        selector: '[textMask]',
        exportAs: 'textMask',
        providers: [MASKEDINPUT_VALUE_ACCESSOR]
    }),
    __param(2, Optional()), __param(2, Inject(COMPOSITION_BUFFER_MODE))
], MaskedInputDirective);
let TextMaskModule = class TextMaskModule {
};
TextMaskModule = __decorate([
    NgModule({
        imports: [
            BrowserModule
        ],
        declarations: [MaskedInputDirective],
        exports: [MaskedInputDirective]
    })
], TextMaskModule);

var NgBrazil_1;
const TextMask = {
    TextMaskModule
};
const NgBrazilValidators = {
    cpf,
    cnpj,
    celular,
    cep,
    currency,
    inscricaoestadual,
    number,
    pispasep,
    placa,
    percentage,
    renavam,
    rg,
    telefone,
    time,
    titulo
};
const MASKS = utilsBr.MASKS;
const CustomDirectives = [
    CelularValidator,
    CelularPipe,
    CEPValidator,
    CEPPipe,
    CPFValidator,
    CPFPipe,
    CNPJValidator,
    CNPJPipe,
    CURRENCYValidator,
    CURRENCYPipe,
    InscricaoEstadualValidator,
    InscricaoEstadualPipe,
    NUMBERValidator,
    NUMBERPipe,
    PERCENTAGEValidator,
    PERCENTAGEPipe,
    PispasepValidator,
    PispasepPipe,
    PLACAValidator,
    PLACAPipe,
    RenavamValidator,
    RenavamPipe,
    RGValidator,
    RGPipe,
    TelefoneValidator,
    TelefonePipe,
    TIMEValidator,
    TIMEPipe,
    TITULOValidator,
    TITULOPipe
];
const NgBrDirectives = {
    CelularValidator,
    CelularPipe,
    CEPValidator,
    CEPPipe,
    CNPJValidator,
    CNPJPipe,
    CPFValidator,
    CPFPipe,
    CURRENCYValidator,
    CURRENCYPipe,
    InscricaoEstadualValidator,
    InscricaoEstadualPipe,
    NUMBERValidator,
    NUMBERPipe,
    PERCENTAGEValidator,
    PERCENTAGEPipe,
    PispasepValidator,
    PispasepPipe,
    PLACAValidator,
    PLACAPipe,
    RGValidator,
    RGPipe,
    RenavamValidator,
    RenavamPipe,
    TelefoneValidator,
    TelefonePipe,
    TIMEValidator,
    TIMEPipe,
    TITULOValidator,
    TITULOPipe
};
let NgBrazil = NgBrazil_1 = class NgBrazil {
    static forRoot() {
        return {
            ngModule: NgBrazil_1
        };
    }
};
NgBrazil = NgBrazil_1 = __decorate([
    NgModule({
        imports: [],
        declarations: [
            CustomDirectives
        ],
        exports: [
            CustomDirectives
        ]
    })
], NgBrazil);

/**
 * Generated bundle index. Do not edit.
 */

export { CustomDirectives, MASKS, NgBrDirectives, NgBrazil, NgBrazilValidators, TextMask, MASKEDINPUT_VALUE_ACCESSOR as Éµa, MaskedInputDirective as Éµb, CURRENCYValidator as Éµba, CURRENCYPipe as Éµbb, InscricaoEstadualValidator as Éµbc, InscricaoEstadualPipe as Éµbd, NUMBERValidator as Éµbe, NUMBERPipe as Éµbf, PERCENTAGEValidator as Éµbg, PERCENTAGEPipe as Éµbh, PispasepValidator as Éµbi, PispasepPipe as Éµbj, PLACAValidator as Éµbk, PLACAPipe as Éµbl, RenavamValidator as Éµbm, RenavamPipe as Éµbn, RGValidator as Éµbo, RGPipe as Éµbp, TelefoneValidator as Éµbq, TelefonePipe as Éµbr, TIMEValidator as Éµbs, TIMEPipe as Éµbt, TITULOValidator as Éµbu, TITULOPipe as Éµbv, TextMaskModule as Éµc, cpf as Éµd, cnpj as Éµe, celular as Éµf, cep as Éµg, currency as Éµh, inscricaoestadual as Éµi, number as Éµj, pispasep as Éµk, placa as Éµl, percentage as Éµm, renavam as Éµn, rg as Éµo, telefone as Éµp, time as Éµq, titulo as Éµr, CelularValidator as Éµs, CelularPipe as Éµt, CEPValidator as Éµu, CEPPipe as Éµv, CPFValidator as Éµw, CPFPipe as Éµx, CNPJValidator as Éµy, CNPJPipe as Éµz };
//# sourceMappingURL=ng-brazil.js.map
