(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('js-brasil'), require('@angular/platform-browser'), require('text-mask-core/dist/textMaskCore')) :
    typeof define === 'function' && define.amd ? define('ng-brazil', ['exports', '@angular/core', '@angular/forms', 'js-brasil', '@angular/platform-browser', 'text-mask-core/dist/textMaskCore'], factory) :
    (global = global || self, factory(global['ng-brazil'] = {}, global.ng.core, global.ng.forms, global.jsBrasil, global.ng.platformBrowser, global.textMaskCore));
}(this, (function (exports, core, forms, jsBrasil, platformBrowser, textMaskCore) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var cpf = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.cpf(v) ? null : { cpf: true };
    };

    var CPF_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return CPFValidator; }),
        multi: true
    };
    var CPFValidator = /** @class */ (function () {
        function CPFValidator() {
        }
        CPFValidator.prototype.validate = function (c) {
            return cpf(c);
        };
        CPFValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[cpf][formControlName],[cpf][formControl],[cpf][ngModel]',
                providers: [CPF_VALIDATOR]
            })
        ], CPFValidator);
        return CPFValidator;
    }());

    var CPFPipe = /** @class */ (function () {
        function CPFPipe() {
        }
        CPFPipe.prototype.transform = function (cpfValue) {
            return jsBrasil.maskBr.cpf(cpfValue);
        };
        CPFPipe = __decorate([
            core.Pipe({
                name: 'cpf',
            })
        ], CPFPipe);
        return CPFPipe;
    }());

    var cnpj = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.cnpj(v) ? null : { cnpj: true };
    };

    var CNPJ_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return CNPJValidator; }),
        multi: true
    };
    var CNPJValidator = /** @class */ (function () {
        function CNPJValidator() {
        }
        CNPJValidator.prototype.validate = function (c) {
            return cnpj(c);
        };
        CNPJValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[cnpj][formControlName],[cnpj][formControl],[cnpj][ngModel]',
                providers: [CNPJ_VALIDATOR]
            })
        ], CNPJValidator);
        return CNPJValidator;
    }());

    var CNPJPipe = /** @class */ (function () {
        function CNPJPipe() {
        }
        CNPJPipe.prototype.transform = function (cnpjValue) {
            return jsBrasil.maskBr.cnpj(cnpjValue);
        };
        CNPJPipe = __decorate([
            core.Pipe({
                name: 'cnpj',
            })
        ], CNPJPipe);
        return CNPJPipe;
    }());

    var telefone = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.telefone(v) ? null : { telefone: true };
    };

    var TELEFONE_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return TelefoneValidator; }),
        multi: true
    };
    var TelefoneValidator = /** @class */ (function () {
        function TelefoneValidator() {
        }
        TelefoneValidator.prototype.validate = function (c) {
            return telefone(c);
        };
        TelefoneValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[telefone][formControlName],[telefone][formControl],[telefone][ngModel]',
                providers: [TELEFONE_VALIDATOR]
            })
        ], TelefoneValidator);
        return TelefoneValidator;
    }());

    var TelefonePipe = /** @class */ (function () {
        function TelefonePipe() {
        }
        TelefonePipe.prototype.transform = function (telefoneValue) {
            return jsBrasil.maskBr.telefone(telefoneValue);
        };
        TelefonePipe = __decorate([
            core.Pipe({
                name: 'telefone',
            })
        ], TelefonePipe);
        return TelefonePipe;
    }());

    var celular = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.celular(v) ? null : { celular: true };
    };

    var CELULAR_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return CelularValidator; }),
        multi: true
    };
    var CelularValidator = /** @class */ (function () {
        function CelularValidator() {
        }
        CelularValidator.prototype.validate = function (c) {
            return celular(c);
        };
        CelularValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[celular][formControlName],[celular][formControl],[celular][ngModel]',
                providers: [CELULAR_VALIDATOR]
            })
        ], CelularValidator);
        return CelularValidator;
    }());

    var CelularPipe = /** @class */ (function () {
        function CelularPipe() {
        }
        CelularPipe.prototype.transform = function (celularValue) {
            return jsBrasil.maskBr.celular(celularValue);
        };
        CelularPipe = __decorate([
            core.Pipe({
                name: 'celular',
            })
        ], CelularPipe);
        return CelularPipe;
    }());

    var inscricaoestadual = function (estado) {
        return function (control) {
            if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
                return null;
            }
            var v = control.value;
            return jsBrasil.validateBr.inscricaoestadual(v, estado) ? null : { inscricaoestadual: true };
        };
    };

    var INSCRICAOESTADUAL_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return InscricaoEstadualValidator; }),
        multi: true
    };
    var InscricaoEstadualValidator = /** @class */ (function () {
        function InscricaoEstadualValidator() {
        }
        InscricaoEstadualValidator.prototype.validate = function (c) {
            return inscricaoestadual('mg')(c);
        };
        InscricaoEstadualValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[inscricaoestadual][formControlName],[inscricaoestadual][formControl],[inscricaoestadual][ngModel]',
                providers: [INSCRICAOESTADUAL_VALIDATOR]
            })
        ], InscricaoEstadualValidator);
        return InscricaoEstadualValidator;
    }());

    var InscricaoEstadualPipe = /** @class */ (function () {
        function InscricaoEstadualPipe() {
        }
        InscricaoEstadualPipe.prototype.transform = function (inscricaoestadualValue, estado) {
            return jsBrasil.maskBr.inscricaoestadual(inscricaoestadualValue, estado);
        };
        InscricaoEstadualPipe = __decorate([
            core.Pipe({
                name: 'inscricaoestadual',
            })
        ], InscricaoEstadualPipe);
        return InscricaoEstadualPipe;
    }());

    var cep = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.cep(v) ? null : { cep: true };
    };

    var CEP_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return CEPValidator; }),
        multi: true
    };
    var CEPValidator = /** @class */ (function () {
        function CEPValidator() {
        }
        CEPValidator.prototype.validate = function (c) {
            return cep(c);
        };
        CEPValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[cep][formControlName],[cep][formControl],[cep][ngModel]',
                providers: [CEP_VALIDATOR]
            })
        ], CEPValidator);
        return CEPValidator;
    }());

    var CEPPipe = /** @class */ (function () {
        function CEPPipe() {
        }
        CEPPipe.prototype.transform = function (cepValue) {
            return jsBrasil.maskBr.cep(cepValue);
        };
        CEPPipe = __decorate([
            core.Pipe({
                name: 'cep',
            })
        ], CEPPipe);
        return CEPPipe;
    }());

    var currency = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.currency(v) ? null : { currency: true };
    };

    var CURRENCY_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return CURRENCYValidator; }),
        multi: true
    };
    var CURRENCYValidator = /** @class */ (function () {
        function CURRENCYValidator() {
        }
        CURRENCYValidator.prototype.validate = function (c) {
            return currency(c);
        };
        CURRENCYValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[currency][formControlName],[currency][formControl],[currency][ngModel]',
                providers: [CURRENCY_VALIDATOR]
            })
        ], CURRENCYValidator);
        return CURRENCYValidator;
    }());

    var CURRENCYPipe = /** @class */ (function () {
        function CURRENCYPipe() {
        }
        CURRENCYPipe.prototype.transform = function (currencyValue) {
            return jsBrasil.maskBr.currency(currencyValue);
        };
        CURRENCYPipe = __decorate([
            core.Pipe({
                name: 'currencyBrazil',
            })
        ], CURRENCYPipe);
        return CURRENCYPipe;
    }());

    var number = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.number(v) ? null : { number: true };
    };

    var NUMBER_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return NUMBERValidator; }),
        multi: true
    };
    var NUMBERValidator = /** @class */ (function () {
        function NUMBERValidator() {
        }
        NUMBERValidator.prototype.validate = function (c) {
            return number(c);
        };
        NUMBERValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[number][formControlName],[number][formControl],[number][ngModel]',
                providers: [NUMBER_VALIDATOR]
            })
        ], NUMBERValidator);
        return NUMBERValidator;
    }());

    var NUMBERPipe = /** @class */ (function () {
        function NUMBERPipe() {
        }
        NUMBERPipe.prototype.transform = function (numberValue) {
            return jsBrasil.maskBr.number(numberValue);
        };
        NUMBERPipe = __decorate([
            core.Pipe({
                name: 'numberBrazil',
            })
        ], NUMBERPipe);
        return NUMBERPipe;
    }());

    var placa = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.placa(v) ? null : { placa: true };
    };

    var PLACA_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return PLACAValidator; }),
        multi: true
    };
    var PLACAValidator = /** @class */ (function () {
        function PLACAValidator() {
        }
        PLACAValidator.prototype.validate = function (c) {
            return placa(c);
        };
        PLACAValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[placa][formControlName],[placa][formControl],[placa][ngModel]',
                providers: [PLACA_VALIDATOR]
            })
        ], PLACAValidator);
        return PLACAValidator;
    }());

    var PLACAPipe = /** @class */ (function () {
        function PLACAPipe() {
        }
        PLACAPipe.prototype.transform = function (placaValue) {
            return jsBrasil.maskBr.placa(placaValue);
        };
        PLACAPipe = __decorate([
            core.Pipe({
                name: 'placa'
            })
        ], PLACAPipe);
        return PLACAPipe;
    }());

    var percentage = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.porcentagem(v) ? null : { percentage: true };
    };

    var PERCENTAGE_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return PERCENTAGEValidator; }),
        multi: true
    };
    var PERCENTAGEValidator = /** @class */ (function () {
        function PERCENTAGEValidator() {
        }
        PERCENTAGEValidator.prototype.validate = function (c) {
            return percentage(c);
        };
        PERCENTAGEValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[percentage][formControlName],[percentage][formControl],[percentage][ngModel]',
                providers: [PERCENTAGE_VALIDATOR]
            })
        ], PERCENTAGEValidator);
        return PERCENTAGEValidator;
    }());

    var PERCENTAGEPipe = /** @class */ (function () {
        function PERCENTAGEPipe() {
        }
        PERCENTAGEPipe.prototype.transform = function (percentageValue) {
            return jsBrasil.maskBr.porcentagem(percentageValue);
        };
        PERCENTAGEPipe = __decorate([
            core.Pipe({
                name: 'percentage',
            })
        ], PERCENTAGEPipe);
        return PERCENTAGEPipe;
    }());

    var renavam = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.renavam(v) ? null : { renavam: true };
    };

    var RENAVAM_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return RenavamValidator; }),
        multi: true
    };
    var RenavamValidator = /** @class */ (function () {
        function RenavamValidator() {
        }
        RenavamValidator.prototype.validate = function (c) {
            return renavam(c);
        };
        RenavamValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[renavam][formControlName],[renavam][formControl],[renavam][ngModel]',
                providers: [RENAVAM_VALIDATOR]
            })
        ], RenavamValidator);
        return RenavamValidator;
    }());

    var RenavamPipe = /** @class */ (function () {
        function RenavamPipe() {
        }
        RenavamPipe.prototype.transform = function (renavamValue) {
            return jsBrasil.maskBr.renavam(renavamValue);
        };
        RenavamPipe = __decorate([
            core.Pipe({
                name: 'renavam',
            })
        ], RenavamPipe);
        return RenavamPipe;
    }());

    var pispasep = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.pispasep(v) ? null : { pispasep: true };
    };

    var PISPASE_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return PispasepValidator; }),
        multi: true
    };
    var PispasepValidator = /** @class */ (function () {
        function PispasepValidator() {
        }
        PispasepValidator.prototype.validate = function (c) {
            return pispasep(c);
        };
        PispasepValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[pispasep][formControlName],[pispasep][formControl],[pispasep][ngModel]',
                providers: [PISPASE_VALIDATOR]
            })
        ], PispasepValidator);
        return PispasepValidator;
    }());

    var PispasepPipe = /** @class */ (function () {
        function PispasepPipe() {
        }
        PispasepPipe.prototype.transform = function (pispasepValue) {
            return jsBrasil.maskBr.pispasep(pispasepValue);
        };
        PispasepPipe = __decorate([
            core.Pipe({
                name: 'pispasep',
            })
        ], PispasepPipe);
        return PispasepPipe;
    }());

    var rg = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.rg(v) ? null : { rg: true };
    };

    var RG_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return RGValidator; }),
        multi: true
    };
    var RGValidator = /** @class */ (function () {
        function RGValidator() {
        }
        RGValidator.prototype.validate = function (c) {
            return rg(c);
        };
        RGValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[rg][formControlName],[rg][formControl],[rg][ngModel]',
                providers: [RG_VALIDATOR]
            })
        ], RGValidator);
        return RGValidator;
    }());

    var RGPipe = /** @class */ (function () {
        function RGPipe() {
        }
        RGPipe.prototype.transform = function (rgValue) {
            return jsBrasil.maskBr.rg(rgValue);
        };
        RGPipe = __decorate([
            core.Pipe({
                name: 'rg',
            })
        ], RGPipe);
        return RGPipe;
    }());

    var time = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.time(v) ? null : { time: true };
    };

    var TIME_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return TIMEValidator; }),
        multi: true
    };
    var TIMEValidator = /** @class */ (function () {
        function TIMEValidator() {
        }
        TIMEValidator.prototype.validate = function (c) {
            return time(c);
        };
        TIMEValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[time][formControlName],[time][formControl],[time][ngModel]',
                providers: [TIME_VALIDATOR]
            })
        ], TIMEValidator);
        return TIMEValidator;
    }());

    var TIMEPipe = /** @class */ (function () {
        function TIMEPipe() {
        }
        TIMEPipe.prototype.transform = function (timeValue) {
            return jsBrasil.maskBr.time(timeValue);
        };
        TIMEPipe = __decorate([
            core.Pipe({
                name: 'time',
            })
        ], TIMEPipe);
        return TIMEPipe;
    }());

    var titulo = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.titulo(v) ? null : { titulo: true };
    };

    var TITULO_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return TITULOValidator; }),
        multi: true
    };
    var TITULOValidator = /** @class */ (function () {
        function TITULOValidator() {
        }
        TITULOValidator.prototype.validate = function (c) {
            return titulo(c);
        };
        TITULOValidator = __decorate([
            core.Directive({
                // tslint:disable-next-line:directive-selector
                selector: '[titulo][formControlName],[titulo][formControl],[titulo][ngModel]',
                providers: [TITULO_VALIDATOR]
            })
        ], TITULOValidator);
        return TITULOValidator;
    }());

    var TITULOPipe = /** @class */ (function () {
        function TITULOPipe() {
        }
        TITULOPipe.prototype.transform = function (tituloValue) {
            return jsBrasil.maskBr.titulo(tituloValue);
        };
        TITULOPipe = __decorate([
            core.Pipe({
                name: 'titulo'
            })
        ], TITULOPipe);
        return TITULOPipe;
    }());

    var TextMaskConfig = /** @class */ (function () {
        function TextMaskConfig() {
        }
        return TextMaskConfig;
    }());
    var MASKEDINPUT_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return MaskedInputDirective; }),
        multi: true
    };
    /**
     * We must check whether the agent is Android because composition events
     * behave differently between iOS and Android.
     */
    function _isAndroid() {
        var userAgent = platformBrowser.ɵgetDOM() ? platformBrowser.ɵgetDOM().getUserAgent() : '';
        return /android (\d+)/.test(userAgent.toLowerCase());
    }
    var MaskedInputDirective = /** @class */ (function () {
        function MaskedInputDirective(rendererFactory, _elementRef, _compositionMode) {
            this._elementRef = _elementRef;
            this._compositionMode = _compositionMode;
            this.textMaskConfig = {
                mask: [],
                guide: true,
                placeholderChar: '_',
                pipe: undefined,
                keepCharPositions: false,
            };
            this.onChange = function (_) { };
            this.onTouched = function () { };
            /** Whether the user is creating a composition string (IME events). */
            this._composing = false;
            this._renderer = rendererFactory.createRenderer(null, null);
            if (this._compositionMode == null) {
                this._compositionMode = !_isAndroid();
            }
        }
        MaskedInputDirective.prototype.ngOnChanges = function (changes) {
            this._setupMask(true);
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(this.inputElement.value);
            }
        };
        MaskedInputDirective.prototype.writeValue = function (value) {
            this._setupMask();
            // set the initial value for cases where the mask is disabled
            var normalizedValue = value == null ? '' : value;
            this._renderer.setProperty(this.inputElement, 'value', normalizedValue);
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(value);
            }
        };
        MaskedInputDirective.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        MaskedInputDirective.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        MaskedInputDirective.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        MaskedInputDirective.prototype._handleInput = function (value) {
            if (!this._compositionMode || (this._compositionMode && !this._composing)) {
                this._setupMask();
                if (this.textMaskInputElement !== undefined) {
                    this.textMaskInputElement.update(value);
                    // get the updated value
                    value = this.inputElement.value;
                    this.onChange(value);
                }
            }
        };
        MaskedInputDirective.prototype._setupMask = function (create) {
            if (create === void 0) { create = false; }
            if (!this.inputElement) {
                if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {
                    // `textMask` directive is used directly on an input element
                    this.inputElement = this._elementRef.nativeElement;
                }
                else {
                    // `textMask` directive is used on an abstracted input element, `md-input-container`, etc
                    this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];
                }
            }
            if (this.inputElement && create) {
                this.textMaskInputElement = textMaskCore.createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));
            }
        };
        MaskedInputDirective.prototype._compositionStart = function () { this._composing = true; };
        MaskedInputDirective.prototype._compositionEnd = function (value) {
            this._composing = false;
            this._compositionMode && this._handleInput(value);
        };
        MaskedInputDirective.ctorParameters = function () { return [
            { type: core.RendererFactory2 },
            { type: core.ElementRef },
            { type: Boolean, decorators: [{ type: core.Optional }, { type: core.Inject, args: [forms.COMPOSITION_BUFFER_MODE,] }] }
        ]; };
        __decorate([
            core.Input('textMask')
        ], MaskedInputDirective.prototype, "textMaskConfig", void 0);
        MaskedInputDirective = __decorate([
            core.Injectable(),
            core.Directive({
                host: {
                    '(input)': '_handleInput($event.target.value)',
                    '(blur)': 'onTouched()',
                    '(compositionstart)': '_compositionStart()',
                    '(compositionend)': '_compositionEnd($event.target.value)'
                },
                selector: '[textMask]',
                exportAs: 'textMask',
                providers: [MASKEDINPUT_VALUE_ACCESSOR]
            }),
            __param(2, core.Optional()), __param(2, core.Inject(forms.COMPOSITION_BUFFER_MODE))
        ], MaskedInputDirective);
        return MaskedInputDirective;
    }());
    var TextMaskModule = /** @class */ (function () {
        function TextMaskModule() {
        }
        TextMaskModule = __decorate([
            core.NgModule({
                imports: [
                    platformBrowser.BrowserModule
                ],
                declarations: [MaskedInputDirective],
                exports: [MaskedInputDirective]
            })
        ], TextMaskModule);
        return TextMaskModule;
    }());

    var TextMask = {
        TextMaskModule: TextMaskModule
    };
    var NgBrazilValidators = {
        cpf: cpf,
        cnpj: cnpj,
        celular: celular,
        cep: cep,
        currency: currency,
        inscricaoestadual: inscricaoestadual,
        number: number,
        pispasep: pispasep,
        placa: placa,
        percentage: percentage,
        renavam: renavam,
        rg: rg,
        telefone: telefone,
        time: time,
        titulo: titulo
    };
    var MASKS = jsBrasil.utilsBr.MASKS;
    var CustomDirectives = [
        CelularValidator,
        CelularPipe,
        CEPValidator,
        CEPPipe,
        CPFValidator,
        CPFPipe,
        CNPJValidator,
        CNPJPipe,
        CURRENCYValidator,
        CURRENCYPipe,
        InscricaoEstadualValidator,
        InscricaoEstadualPipe,
        NUMBERValidator,
        NUMBERPipe,
        PERCENTAGEValidator,
        PERCENTAGEPipe,
        PispasepValidator,
        PispasepPipe,
        PLACAValidator,
        PLACAPipe,
        RenavamValidator,
        RenavamPipe,
        RGValidator,
        RGPipe,
        TelefoneValidator,
        TelefonePipe,
        TIMEValidator,
        TIMEPipe,
        TITULOValidator,
        TITULOPipe
    ];
    var NgBrDirectives = {
        CelularValidator: CelularValidator,
        CelularPipe: CelularPipe,
        CEPValidator: CEPValidator,
        CEPPipe: CEPPipe,
        CNPJValidator: CNPJValidator,
        CNPJPipe: CNPJPipe,
        CPFValidator: CPFValidator,
        CPFPipe: CPFPipe,
        CURRENCYValidator: CURRENCYValidator,
        CURRENCYPipe: CURRENCYPipe,
        InscricaoEstadualValidator: InscricaoEstadualValidator,
        InscricaoEstadualPipe: InscricaoEstadualPipe,
        NUMBERValidator: NUMBERValidator,
        NUMBERPipe: NUMBERPipe,
        PERCENTAGEValidator: PERCENTAGEValidator,
        PERCENTAGEPipe: PERCENTAGEPipe,
        PispasepValidator: PispasepValidator,
        PispasepPipe: PispasepPipe,
        PLACAValidator: PLACAValidator,
        PLACAPipe: PLACAPipe,
        RGValidator: RGValidator,
        RGPipe: RGPipe,
        RenavamValidator: RenavamValidator,
        RenavamPipe: RenavamPipe,
        TelefoneValidator: TelefoneValidator,
        TelefonePipe: TelefonePipe,
        TIMEValidator: TIMEValidator,
        TIMEPipe: TIMEPipe,
        TITULOValidator: TITULOValidator,
        TITULOPipe: TITULOPipe
    };
    var NgBrazil = /** @class */ (function () {
        function NgBrazil() {
        }
        NgBrazil_1 = NgBrazil;
        NgBrazil.forRoot = function () {
            return {
                ngModule: NgBrazil_1
            };
        };
        var NgBrazil_1;
        NgBrazil = NgBrazil_1 = __decorate([
            core.NgModule({
                imports: [],
                declarations: [
                    CustomDirectives
                ],
                exports: [
                    CustomDirectives
                ]
            })
        ], NgBrazil);
        return NgBrazil;
    }());

    exports.CustomDirectives = CustomDirectives;
    exports.MASKS = MASKS;
    exports.NgBrDirectives = NgBrDirectives;
    exports.NgBrazil = NgBrazil;
    exports.NgBrazilValidators = NgBrazilValidators;
    exports.TextMask = TextMask;
    exports.ɵa = MASKEDINPUT_VALUE_ACCESSOR;
    exports.ɵb = MaskedInputDirective;
    exports.ɵba = CURRENCYValidator;
    exports.ɵbb = CURRENCYPipe;
    exports.ɵbc = InscricaoEstadualValidator;
    exports.ɵbd = InscricaoEstadualPipe;
    exports.ɵbe = NUMBERValidator;
    exports.ɵbf = NUMBERPipe;
    exports.ɵbg = PERCENTAGEValidator;
    exports.ɵbh = PERCENTAGEPipe;
    exports.ɵbi = PispasepValidator;
    exports.ɵbj = PispasepPipe;
    exports.ɵbk = PLACAValidator;
    exports.ɵbl = PLACAPipe;
    exports.ɵbm = RenavamValidator;
    exports.ɵbn = RenavamPipe;
    exports.ɵbo = RGValidator;
    exports.ɵbp = RGPipe;
    exports.ɵbq = TelefoneValidator;
    exports.ɵbr = TelefonePipe;
    exports.ɵbs = TIMEValidator;
    exports.ɵbt = TIMEPipe;
    exports.ɵbu = TITULOValidator;
    exports.ɵbv = TITULOPipe;
    exports.ɵc = TextMaskModule;
    exports.ɵd = cpf;
    exports.ɵe = cnpj;
    exports.ɵf = celular;
    exports.ɵg = cep;
    exports.ɵh = currency;
    exports.ɵi = inscricaoestadual;
    exports.ɵj = number;
    exports.ɵk = pispasep;
    exports.ɵl = placa;
    exports.ɵm = percentage;
    exports.ɵn = renavam;
    exports.ɵo = rg;
    exports.ɵp = telefone;
    exports.ɵq = time;
    exports.ɵr = titulo;
    exports.ɵs = CelularValidator;
    exports.ɵt = CelularPipe;
    exports.ɵu = CEPValidator;
    exports.ɵv = CEPPipe;
    exports.ɵw = CPFValidator;
    exports.ɵx = CPFPipe;
    exports.ɵy = CNPJValidator;
    exports.ɵz = CNPJPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-brazil.umd.js.map
