import { __decorate, __param } from 'tslib';
import { forwardRef, Directive, Pipe, RendererFactory2, ElementRef, Optional, Inject, Input, Injectable, NgModule } from '@angular/core';
import { Validators, NG_VALIDATORS, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';
import { utilsBr, validateBr, maskBr } from 'js-brasil';
import { ÉµgetDOM, BrowserModule } from '@angular/platform-browser';
import { createTextMaskInputElement } from 'text-mask-core/dist/textMaskCore';

var cpf = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.cpf(v) ? null : { cpf: true };
};

var CPF_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return CPFValidator; }),
    multi: true
};
var CPFValidator = /** @class */ (function () {
    function CPFValidator() {
    }
    CPFValidator.prototype.validate = function (c) {
        return cpf(c);
    };
    CPFValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[cpf][formControlName],[cpf][formControl],[cpf][ngModel]',
            providers: [CPF_VALIDATOR]
        })
    ], CPFValidator);
    return CPFValidator;
}());

var CPFPipe = /** @class */ (function () {
    function CPFPipe() {
    }
    CPFPipe.prototype.transform = function (cpfValue) {
        return maskBr.cpf(cpfValue);
    };
    CPFPipe = __decorate([
        Pipe({
            name: 'cpf',
        })
    ], CPFPipe);
    return CPFPipe;
}());

var cnpj = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.cnpj(v) ? null : { cnpj: true };
};

var CNPJ_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return CNPJValidator; }),
    multi: true
};
var CNPJValidator = /** @class */ (function () {
    function CNPJValidator() {
    }
    CNPJValidator.prototype.validate = function (c) {
        return cnpj(c);
    };
    CNPJValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[cnpj][formControlName],[cnpj][formControl],[cnpj][ngModel]',
            providers: [CNPJ_VALIDATOR]
        })
    ], CNPJValidator);
    return CNPJValidator;
}());

var CNPJPipe = /** @class */ (function () {
    function CNPJPipe() {
    }
    CNPJPipe.prototype.transform = function (cnpjValue) {
        return maskBr.cnpj(cnpjValue);
    };
    CNPJPipe = __decorate([
        Pipe({
            name: 'cnpj',
        })
    ], CNPJPipe);
    return CNPJPipe;
}());

var telefone = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.telefone(v) ? null : { telefone: true };
};

var TELEFONE_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return TelefoneValidator; }),
    multi: true
};
var TelefoneValidator = /** @class */ (function () {
    function TelefoneValidator() {
    }
    TelefoneValidator.prototype.validate = function (c) {
        return telefone(c);
    };
    TelefoneValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[telefone][formControlName],[telefone][formControl],[telefone][ngModel]',
            providers: [TELEFONE_VALIDATOR]
        })
    ], TelefoneValidator);
    return TelefoneValidator;
}());

var TelefonePipe = /** @class */ (function () {
    function TelefonePipe() {
    }
    TelefonePipe.prototype.transform = function (telefoneValue) {
        return maskBr.telefone(telefoneValue);
    };
    TelefonePipe = __decorate([
        Pipe({
            name: 'telefone',
        })
    ], TelefonePipe);
    return TelefonePipe;
}());

var celular = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.celular(v) ? null : { celular: true };
};

var CELULAR_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return CelularValidator; }),
    multi: true
};
var CelularValidator = /** @class */ (function () {
    function CelularValidator() {
    }
    CelularValidator.prototype.validate = function (c) {
        return celular(c);
    };
    CelularValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[celular][formControlName],[celular][formControl],[celular][ngModel]',
            providers: [CELULAR_VALIDATOR]
        })
    ], CelularValidator);
    return CelularValidator;
}());

var CelularPipe = /** @class */ (function () {
    function CelularPipe() {
    }
    CelularPipe.prototype.transform = function (celularValue) {
        return maskBr.celular(celularValue);
    };
    CelularPipe = __decorate([
        Pipe({
            name: 'celular',
        })
    ], CelularPipe);
    return CelularPipe;
}());

var inscricaoestadual = function (estado) {
    return function (control) {
        if (utilsBr.isPresent(Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return validateBr.inscricaoestadual(v, estado) ? null : { inscricaoestadual: true };
    };
};

var INSCRICAOESTADUAL_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return InscricaoEstadualValidator; }),
    multi: true
};
var InscricaoEstadualValidator = /** @class */ (function () {
    function InscricaoEstadualValidator() {
    }
    InscricaoEstadualValidator.prototype.validate = function (c) {
        return inscricaoestadual('mg')(c);
    };
    InscricaoEstadualValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[inscricaoestadual][formControlName],[inscricaoestadual][formControl],[inscricaoestadual][ngModel]',
            providers: [INSCRICAOESTADUAL_VALIDATOR]
        })
    ], InscricaoEstadualValidator);
    return InscricaoEstadualValidator;
}());

var InscricaoEstadualPipe = /** @class */ (function () {
    function InscricaoEstadualPipe() {
    }
    InscricaoEstadualPipe.prototype.transform = function (inscricaoestadualValue, estado) {
        return maskBr.inscricaoestadual(inscricaoestadualValue, estado);
    };
    InscricaoEstadualPipe = __decorate([
        Pipe({
            name: 'inscricaoestadual',
        })
    ], InscricaoEstadualPipe);
    return InscricaoEstadualPipe;
}());

var cep = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.cep(v) ? null : { cep: true };
};

var CEP_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return CEPValidator; }),
    multi: true
};
var CEPValidator = /** @class */ (function () {
    function CEPValidator() {
    }
    CEPValidator.prototype.validate = function (c) {
        return cep(c);
    };
    CEPValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[cep][formControlName],[cep][formControl],[cep][ngModel]',
            providers: [CEP_VALIDATOR]
        })
    ], CEPValidator);
    return CEPValidator;
}());

var CEPPipe = /** @class */ (function () {
    function CEPPipe() {
    }
    CEPPipe.prototype.transform = function (cepValue) {
        return maskBr.cep(cepValue);
    };
    CEPPipe = __decorate([
        Pipe({
            name: 'cep',
        })
    ], CEPPipe);
    return CEPPipe;
}());

var currency = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.currency(v) ? null : { currency: true };
};

var CURRENCY_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return CURRENCYValidator; }),
    multi: true
};
var CURRENCYValidator = /** @class */ (function () {
    function CURRENCYValidator() {
    }
    CURRENCYValidator.prototype.validate = function (c) {
        return currency(c);
    };
    CURRENCYValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[currency][formControlName],[currency][formControl],[currency][ngModel]',
            providers: [CURRENCY_VALIDATOR]
        })
    ], CURRENCYValidator);
    return CURRENCYValidator;
}());

var CURRENCYPipe = /** @class */ (function () {
    function CURRENCYPipe() {
    }
    CURRENCYPipe.prototype.transform = function (currencyValue) {
        return maskBr.currency(currencyValue);
    };
    CURRENCYPipe = __decorate([
        Pipe({
            name: 'currencyBrazil',
        })
    ], CURRENCYPipe);
    return CURRENCYPipe;
}());

var number = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.number(v) ? null : { number: true };
};

var NUMBER_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return NUMBERValidator; }),
    multi: true
};
var NUMBERValidator = /** @class */ (function () {
    function NUMBERValidator() {
    }
    NUMBERValidator.prototype.validate = function (c) {
        return number(c);
    };
    NUMBERValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[number][formControlName],[number][formControl],[number][ngModel]',
            providers: [NUMBER_VALIDATOR]
        })
    ], NUMBERValidator);
    return NUMBERValidator;
}());

var NUMBERPipe = /** @class */ (function () {
    function NUMBERPipe() {
    }
    NUMBERPipe.prototype.transform = function (numberValue) {
        return maskBr.number(numberValue);
    };
    NUMBERPipe = __decorate([
        Pipe({
            name: 'numberBrazil',
        })
    ], NUMBERPipe);
    return NUMBERPipe;
}());

var placa = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.placa(v) ? null : { placa: true };
};

var PLACA_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return PLACAValidator; }),
    multi: true
};
var PLACAValidator = /** @class */ (function () {
    function PLACAValidator() {
    }
    PLACAValidator.prototype.validate = function (c) {
        return placa(c);
    };
    PLACAValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[placa][formControlName],[placa][formControl],[placa][ngModel]',
            providers: [PLACA_VALIDATOR]
        })
    ], PLACAValidator);
    return PLACAValidator;
}());

var PLACAPipe = /** @class */ (function () {
    function PLACAPipe() {
    }
    PLACAPipe.prototype.transform = function (placaValue) {
        return maskBr.placa(placaValue);
    };
    PLACAPipe = __decorate([
        Pipe({
            name: 'placa'
        })
    ], PLACAPipe);
    return PLACAPipe;
}());

var percentage = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.porcentagem(v) ? null : { percentage: true };
};

var PERCENTAGE_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return PERCENTAGEValidator; }),
    multi: true
};
var PERCENTAGEValidator = /** @class */ (function () {
    function PERCENTAGEValidator() {
    }
    PERCENTAGEValidator.prototype.validate = function (c) {
        return percentage(c);
    };
    PERCENTAGEValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[percentage][formControlName],[percentage][formControl],[percentage][ngModel]',
            providers: [PERCENTAGE_VALIDATOR]
        })
    ], PERCENTAGEValidator);
    return PERCENTAGEValidator;
}());

var PERCENTAGEPipe = /** @class */ (function () {
    function PERCENTAGEPipe() {
    }
    PERCENTAGEPipe.prototype.transform = function (percentageValue) {
        return maskBr.porcentagem(percentageValue);
    };
    PERCENTAGEPipe = __decorate([
        Pipe({
            name: 'percentage',
        })
    ], PERCENTAGEPipe);
    return PERCENTAGEPipe;
}());

var renavam = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.renavam(v) ? null : { renavam: true };
};

var RENAVAM_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return RenavamValidator; }),
    multi: true
};
var RenavamValidator = /** @class */ (function () {
    function RenavamValidator() {
    }
    RenavamValidator.prototype.validate = function (c) {
        return renavam(c);
    };
    RenavamValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[renavam][formControlName],[renavam][formControl],[renavam][ngModel]',
            providers: [RENAVAM_VALIDATOR]
        })
    ], RenavamValidator);
    return RenavamValidator;
}());

var RenavamPipe = /** @class */ (function () {
    function RenavamPipe() {
    }
    RenavamPipe.prototype.transform = function (renavamValue) {
        return maskBr.renavam(renavamValue);
    };
    RenavamPipe = __decorate([
        Pipe({
            name: 'renavam',
        })
    ], RenavamPipe);
    return RenavamPipe;
}());

var pispasep = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.pispasep(v) ? null : { pispasep: true };
};

var PISPASE_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return PispasepValidator; }),
    multi: true
};
var PispasepValidator = /** @class */ (function () {
    function PispasepValidator() {
    }
    PispasepValidator.prototype.validate = function (c) {
        return pispasep(c);
    };
    PispasepValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[pispasep][formControlName],[pispasep][formControl],[pispasep][ngModel]',
            providers: [PISPASE_VALIDATOR]
        })
    ], PispasepValidator);
    return PispasepValidator;
}());

var PispasepPipe = /** @class */ (function () {
    function PispasepPipe() {
    }
    PispasepPipe.prototype.transform = function (pispasepValue) {
        return maskBr.pispasep(pispasepValue);
    };
    PispasepPipe = __decorate([
        Pipe({
            name: 'pispasep',
        })
    ], PispasepPipe);
    return PispasepPipe;
}());

var rg = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.rg(v) ? null : { rg: true };
};

var RG_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return RGValidator; }),
    multi: true
};
var RGValidator = /** @class */ (function () {
    function RGValidator() {
    }
    RGValidator.prototype.validate = function (c) {
        return rg(c);
    };
    RGValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[rg][formControlName],[rg][formControl],[rg][ngModel]',
            providers: [RG_VALIDATOR]
        })
    ], RGValidator);
    return RGValidator;
}());

var RGPipe = /** @class */ (function () {
    function RGPipe() {
    }
    RGPipe.prototype.transform = function (rgValue) {
        return maskBr.rg(rgValue);
    };
    RGPipe = __decorate([
        Pipe({
            name: 'rg',
        })
    ], RGPipe);
    return RGPipe;
}());

var time = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.time(v) ? null : { time: true };
};

var TIME_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return TIMEValidator; }),
    multi: true
};
var TIMEValidator = /** @class */ (function () {
    function TIMEValidator() {
    }
    TIMEValidator.prototype.validate = function (c) {
        return time(c);
    };
    TIMEValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[time][formControlName],[time][formControl],[time][ngModel]',
            providers: [TIME_VALIDATOR]
        })
    ], TIMEValidator);
    return TIMEValidator;
}());

var TIMEPipe = /** @class */ (function () {
    function TIMEPipe() {
    }
    TIMEPipe.prototype.transform = function (timeValue) {
        return maskBr.time(timeValue);
    };
    TIMEPipe = __decorate([
        Pipe({
            name: 'time',
        })
    ], TIMEPipe);
    return TIMEPipe;
}());

var titulo = function (control) {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    var v = control.value;
    return validateBr.titulo(v) ? null : { titulo: true };
};

var TITULO_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return TITULOValidator; }),
    multi: true
};
var TITULOValidator = /** @class */ (function () {
    function TITULOValidator() {
    }
    TITULOValidator.prototype.validate = function (c) {
        return titulo(c);
    };
    TITULOValidator = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[titulo][formControlName],[titulo][formControl],[titulo][ngModel]',
            providers: [TITULO_VALIDATOR]
        })
    ], TITULOValidator);
    return TITULOValidator;
}());

var TITULOPipe = /** @class */ (function () {
    function TITULOPipe() {
    }
    TITULOPipe.prototype.transform = function (tituloValue) {
        return maskBr.titulo(tituloValue);
    };
    TITULOPipe = __decorate([
        Pipe({
            name: 'titulo'
        })
    ], TITULOPipe);
    return TITULOPipe;
}());

var TextMaskConfig = /** @class */ (function () {
    function TextMaskConfig() {
    }
    return TextMaskConfig;
}());
var MASKEDINPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return MaskedInputDirective; }),
    multi: true
};
/**
 * We must check whether the agent is Android because composition events
 * behave differently between iOS and Android.
 */
function _isAndroid() {
    var userAgent = ÉµgetDOM() ? ÉµgetDOM().getUserAgent() : '';
    return /android (\d+)/.test(userAgent.toLowerCase());
}
var MaskedInputDirective = /** @class */ (function () {
    function MaskedInputDirective(rendererFactory, _elementRef, _compositionMode) {
        this._elementRef = _elementRef;
        this._compositionMode = _compositionMode;
        this.textMaskConfig = {
            mask: [],
            guide: true,
            placeholderChar: '_',
            pipe: undefined,
            keepCharPositions: false,
        };
        this.onChange = function (_) { };
        this.onTouched = function () { };
        /** Whether the user is creating a composition string (IME events). */
        this._composing = false;
        this._renderer = rendererFactory.createRenderer(null, null);
        if (this._compositionMode == null) {
            this._compositionMode = !_isAndroid();
        }
    }
    MaskedInputDirective.prototype.ngOnChanges = function (changes) {
        this._setupMask(true);
        if (this.textMaskInputElement !== undefined) {
            this.textMaskInputElement.update(this.inputElement.value);
        }
    };
    MaskedInputDirective.prototype.writeValue = function (value) {
        this._setupMask();
        // set the initial value for cases where the mask is disabled
        var normalizedValue = value == null ? '' : value;
        this._renderer.setProperty(this.inputElement, 'value', normalizedValue);
        if (this.textMaskInputElement !== undefined) {
            this.textMaskInputElement.update(value);
        }
    };
    MaskedInputDirective.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    MaskedInputDirective.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    MaskedInputDirective.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    MaskedInputDirective.prototype._handleInput = function (value) {
        if (!this._compositionMode || (this._compositionMode && !this._composing)) {
            this._setupMask();
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(value);
                // get the updated value
                value = this.inputElement.value;
                this.onChange(value);
            }
        }
    };
    MaskedInputDirective.prototype._setupMask = function (create) {
        if (create === void 0) { create = false; }
        if (!this.inputElement) {
            if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {
                // `textMask` directive is used directly on an input element
                this.inputElement = this._elementRef.nativeElement;
            }
            else {
                // `textMask` directive is used on an abstracted input element, `md-input-container`, etc
                this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];
            }
        }
        if (this.inputElement && create) {
            this.textMaskInputElement = createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));
        }
    };
    MaskedInputDirective.prototype._compositionStart = function () { this._composing = true; };
    MaskedInputDirective.prototype._compositionEnd = function (value) {
        this._composing = false;
        this._compositionMode && this._handleInput(value);
    };
    MaskedInputDirective.ctorParameters = function () { return [
        { type: RendererFactory2 },
        { type: ElementRef },
        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }
    ]; };
    __decorate([
        Input('textMask')
    ], MaskedInputDirective.prototype, "textMaskConfig", void 0);
    MaskedInputDirective = __decorate([
        Injectable(),
        Directive({
            host: {
                '(input)': '_handleInput($event.target.value)',
                '(blur)': 'onTouched()',
                '(compositionstart)': '_compositionStart()',
                '(compositionend)': '_compositionEnd($event.target.value)'
            },
            selector: '[textMask]',
            exportAs: 'textMask',
            providers: [MASKEDINPUT_VALUE_ACCESSOR]
        }),
        __param(2, Optional()), __param(2, Inject(COMPOSITION_BUFFER_MODE))
    ], MaskedInputDirective);
    return MaskedInputDirective;
}());
var TextMaskModule = /** @class */ (function () {
    function TextMaskModule() {
    }
    TextMaskModule = __decorate([
        NgModule({
            imports: [
                BrowserModule
            ],
            declarations: [MaskedInputDirective],
            exports: [MaskedInputDirective]
        })
    ], TextMaskModule);
    return TextMaskModule;
}());

var TextMask = {
    TextMaskModule: TextMaskModule
};
var NgBrazilValidators = {
    cpf: cpf,
    cnpj: cnpj,
    celular: celular,
    cep: cep,
    currency: currency,
    inscricaoestadual: inscricaoestadual,
    number: number,
    pispasep: pispasep,
    placa: placa,
    percentage: percentage,
    renavam: renavam,
    rg: rg,
    telefone: telefone,
    time: time,
    titulo: titulo
};
var MASKS = utilsBr.MASKS;
var CustomDirectives = [
    CelularValidator,
    CelularPipe,
    CEPValidator,
    CEPPipe,
    CPFValidator,
    CPFPipe,
    CNPJValidator,
    CNPJPipe,
    CURRENCYValidator,
    CURRENCYPipe,
    InscricaoEstadualValidator,
    InscricaoEstadualPipe,
    NUMBERValidator,
    NUMBERPipe,
    PERCENTAGEValidator,
    PERCENTAGEPipe,
    PispasepValidator,
    PispasepPipe,
    PLACAValidator,
    PLACAPipe,
    RenavamValidator,
    RenavamPipe,
    RGValidator,
    RGPipe,
    TelefoneValidator,
    TelefonePipe,
    TIMEValidator,
    TIMEPipe,
    TITULOValidator,
    TITULOPipe
];
var NgBrDirectives = {
    CelularValidator: CelularValidator,
    CelularPipe: CelularPipe,
    CEPValidator: CEPValidator,
    CEPPipe: CEPPipe,
    CNPJValidator: CNPJValidator,
    CNPJPipe: CNPJPipe,
    CPFValidator: CPFValidator,
    CPFPipe: CPFPipe,
    CURRENCYValidator: CURRENCYValidator,
    CURRENCYPipe: CURRENCYPipe,
    InscricaoEstadualValidator: InscricaoEstadualValidator,
    InscricaoEstadualPipe: InscricaoEstadualPipe,
    NUMBERValidator: NUMBERValidator,
    NUMBERPipe: NUMBERPipe,
    PERCENTAGEValidator: PERCENTAGEValidator,
    PERCENTAGEPipe: PERCENTAGEPipe,
    PispasepValidator: PispasepValidator,
    PispasepPipe: PispasepPipe,
    PLACAValidator: PLACAValidator,
    PLACAPipe: PLACAPipe,
    RGValidator: RGValidator,
    RGPipe: RGPipe,
    RenavamValidator: RenavamValidator,
    RenavamPipe: RenavamPipe,
    TelefoneValidator: TelefoneValidator,
    TelefonePipe: TelefonePipe,
    TIMEValidator: TIMEValidator,
    TIMEPipe: TIMEPipe,
    TITULOValidator: TITULOValidator,
    TITULOPipe: TITULOPipe
};
var NgBrazil = /** @class */ (function () {
    function NgBrazil() {
    }
    NgBrazil_1 = NgBrazil;
    NgBrazil.forRoot = function () {
        return {
            ngModule: NgBrazil_1
        };
    };
    var NgBrazil_1;
    NgBrazil = NgBrazil_1 = __decorate([
        NgModule({
            imports: [],
            declarations: [
                CustomDirectives
            ],
            exports: [
                CustomDirectives
            ]
        })
    ], NgBrazil);
    return NgBrazil;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { CustomDirectives, MASKS, NgBrDirectives, NgBrazil, NgBrazilValidators, TextMask, MASKEDINPUT_VALUE_ACCESSOR as Éµa, MaskedInputDirective as Éµb, CURRENCYValidator as Éµba, CURRENCYPipe as Éµbb, InscricaoEstadualValidator as Éµbc, InscricaoEstadualPipe as Éµbd, NUMBERValidator as Éµbe, NUMBERPipe as Éµbf, PERCENTAGEValidator as Éµbg, PERCENTAGEPipe as Éµbh, PispasepValidator as Éµbi, PispasepPipe as Éµbj, PLACAValidator as Éµbk, PLACAPipe as Éµbl, RenavamValidator as Éµbm, RenavamPipe as Éµbn, RGValidator as Éµbo, RGPipe as Éµbp, TelefoneValidator as Éµbq, TelefonePipe as Éµbr, TIMEValidator as Éµbs, TIMEPipe as Éµbt, TITULOValidator as Éµbu, TITULOPipe as Éµbv, TextMaskModule as Éµc, cpf as Éµd, cnpj as Éµe, celular as Éµf, cep as Éµg, currency as Éµh, inscricaoestadual as Éµi, number as Éµj, pispasep as Éµk, placa as Éµl, percentage as Éµm, renavam as Éµn, rg as Éµo, telefone as Éµp, time as Éµq, titulo as Éµr, CelularValidator as Éµs, CelularPipe as Éµt, CEPValidator as Éµu, CEPPipe as Éµv, CPFValidator as Éµw, CPFPipe as Éµx, CNPJValidator as Éµy, CNPJPipe as Éµz };
//# sourceMappingURL=ng-brazil.js.map
