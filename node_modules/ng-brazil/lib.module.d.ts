import { ModuleWithProviders } from '@angular/core';
import { CPFValidator } from './cpf/directive';
import { CPFPipe } from './cpf/pipe';
import { CNPJValidator } from './cnpj/directive';
import { CNPJPipe } from './cnpj/pipe';
import { TelefoneValidator } from './telefone/directive';
import { TelefonePipe } from './telefone/pipe';
import { CelularValidator } from './celular/directive';
import { CelularPipe } from './celular/pipe';
import { InscricaoEstadualValidator } from './inscricaoestadual/directive';
import { InscricaoEstadualPipe } from './inscricaoestadual/pipe';
import { CEPValidator } from './cep/directive';
import { CEPPipe } from './cep/pipe';
import { CURRENCYValidator } from './currency/directive';
import { CURRENCYPipe } from './currency/pipe';
import { NUMBERValidator } from './number/directive';
import { NUMBERPipe } from './number/pipe';
import { PLACAValidator } from './placa/directive';
import { PLACAPipe } from './placa/pipe';
import { PERCENTAGEValidator } from './percentage/directive';
import { PERCENTAGEPipe } from './percentage/pipe';
import { RenavamValidator } from './renavam/directive';
import { RenavamPipe } from './renavam/pipe';
import { PispasepValidator } from './pispasep/directive';
import { PispasepPipe } from './pispasep/pipe';
import { RGValidator } from './rg/directive';
import { RGPipe } from './rg/pipe';
import { TIMEValidator } from './time/directive';
import { TIMEPipe } from './time/pipe';
import { TITULOValidator } from './titulo/directive';
import { TITULOPipe } from './titulo/pipe';
import { TextMaskModule } from './angular2TextMask';
export declare const TextMask: {
    TextMaskModule: typeof TextMaskModule;
};
export declare const NgBrazilValidators: any;
export declare const MASKS: {
    aih: {
        text: string;
        textMask: (string | RegExp)[];
    };
    cartaocredito: {
        text: string;
        textMask: (string | RegExp)[];
    };
    celular: {
        text: string;
        textMask: (string | RegExp)[];
    };
    cep: {
        text: string;
        textMask: (string | RegExp)[];
    };
    certidao: {
        text: string;
        textMask: (string | RegExp)[];
    };
    chassi: {
        text: string;
        textMask: (string | RegExp)[];
    };
    cid: {};
    cnae: {
        text: string;
        textMask: (string | RegExp)[];
    };
    cnh: {
        text: string;
        textMask: (string | RegExp)[];
    };
    cnpj: {
        text: string;
        textMask: (string | RegExp)[];
    };
    cns: {
        text: string;
        textMask: (string | RegExp)[];
    };
    contabanco: {
        text: string;
        textMask: (string | RegExp)[];
    };
    cpf: {
        text: string;
        textMask: (string | RegExp)[];
    };
    cpfcnpj: {
        text: string;
        textMask: (string | RegExp)[];
    };
    currency: {
        text: string;
        textMask: any;
    };
    data: {
        text: string;
        textMask: (string | RegExp)[];
    };
    ect: {
        text: string;
        textMask: (string | RegExp)[];
    };
    endereco: {
        text: string;
        textMask: (string | RegExp)[];
    };
    inscricaoestadual: {
        ac: {
            text: string;
            textMask: (string | RegExp)[];
        };
        al: {
            text: string;
            textMask: RegExp[];
        };
        am: {
            text: string;
            textMask: (string | RegExp)[];
        };
        ap: {
            text: string;
            textMask: RegExp[];
        };
        ba: {
            text: string;
            textMask: (string | RegExp)[];
        };
        ce: {
            text: string;
            textMask: (string | RegExp)[];
        };
        df: {
            text: string;
            textMask: (string | RegExp)[];
        };
        es: {
            text: string;
            textMask: (string | RegExp)[];
        };
        go: {
            text: string;
            textMask: (string | RegExp)[];
        };
        ma: {
            text: string;
            textMask: (string | RegExp)[];
        };
        mg: {
            text: string;
            textMask: (string | RegExp)[];
        };
        ms: {
            text: string;
            textMask: RegExp[];
        };
        mt: {
            text: string;
            textMask: (string | RegExp)[];
        };
        pa: {
            text: string;
            textMask: (string | RegExp)[];
        };
        pb: {
            text: string;
            textMask: (string | RegExp)[];
        };
        pe: {
            text: string;
            textMask: (string | RegExp)[];
        };
        pi: {
            text: string;
            textMask: (string | RegExp)[];
        };
        pr: {
            text: string;
            textMask: (string | RegExp)[];
        };
        rj: {
            text: string;
            textMask: (string | RegExp)[];
        };
        rn: {
            text: string;
            textMask: (string | RegExp)[];
            textMaskFunction: (userInput: any) => (string | RegExp)[];
        };
        ro: {
            text: string;
            textMask: (string | RegExp)[];
        };
        rr: {
            text: string;
            textMask: (string | RegExp)[];
        };
        rs: {
            text: string;
            textMask: (string | RegExp)[];
        };
        sc: {
            text: string;
            textMask: (string | RegExp)[];
        };
        se: {
            text: string;
            textMask: (string | RegExp)[];
        };
        sp: {
            text: string;
            textMask: (string | RegExp)[];
        };
        to: {
            text: string;
            textMask: (string | RegExp)[];
        };
    };
    iptu: {
        text: string;
        textMask: (string | RegExp)[];
    };
    number: {
        text: string;
        textMask: any;
    };
    porcentagem: {
        text: string;
        textMask: any;
    };
    pispasep: {
        text: string;
        textMask: (string | RegExp)[];
    };
    placa: {
        text: string;
        textMask: (string | RegExp)[];
    };
    processo: {
        text: string;
        textMask: (string | RegExp)[];
    };
    renavam: {
        text: string;
        textMask: (string | RegExp)[];
        textMaskFunction: (userInput: any) => (string | RegExp)[];
    };
    rg: {
        text: string;
        textMask: (string | RegExp)[];
    };
    sped: {
        text: string;
        textMask: (string | RegExp)[];
    };
    telefone: {
        text: string;
        textMask: (string | RegExp)[];
        textMaskFunction: (userInput: any) => (string | RegExp)[];
    };
    time: {
        text: string;
        textMask: (string | RegExp)[];
    };
    titulo: {
        text: string;
        textMask: (string | RegExp)[];
    };
    utils: {
        numberToString: (n: number) => string | number;
    };
};
export declare const CustomDirectives: (typeof CelularValidator | typeof InscricaoEstadualPipe)[];
export declare const NgBrDirectives: {
    CelularValidator: typeof CelularValidator;
    CelularPipe: typeof CelularPipe;
    CEPValidator: typeof CEPValidator;
    CEPPipe: typeof CEPPipe;
    CNPJValidator: typeof CNPJValidator;
    CNPJPipe: typeof CNPJPipe;
    CPFValidator: typeof CPFValidator;
    CPFPipe: typeof CPFPipe;
    CURRENCYValidator: typeof CURRENCYValidator;
    CURRENCYPipe: typeof CURRENCYPipe;
    InscricaoEstadualValidator: typeof InscricaoEstadualValidator;
    InscricaoEstadualPipe: typeof InscricaoEstadualPipe;
    NUMBERValidator: typeof NUMBERValidator;
    NUMBERPipe: typeof NUMBERPipe;
    PERCENTAGEValidator: typeof PERCENTAGEValidator;
    PERCENTAGEPipe: typeof PERCENTAGEPipe;
    PispasepValidator: typeof PispasepValidator;
    PispasepPipe: typeof PispasepPipe;
    PLACAValidator: typeof PLACAValidator;
    PLACAPipe: typeof PLACAPipe;
    RGValidator: typeof RGValidator;
    RGPipe: typeof RGPipe;
    RenavamValidator: typeof RenavamValidator;
    RenavamPipe: typeof RenavamPipe;
    TelefoneValidator: typeof TelefoneValidator;
    TelefonePipe: typeof TelefonePipe;
    TIMEValidator: typeof TIMEValidator;
    TIMEPipe: typeof TIMEPipe;
    TITULOValidator: typeof TITULOValidator;
    TITULOPipe: typeof TITULOPipe;
};
declare class NgBrazil {
    static forRoot(): ModuleWithProviders;
}
export { NgBrazil };
